%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 2002.i039.010.P.m004.c33.chatbot messenger AI isometric set-05.eps
%%Creator: Adobe Illustrator(R) 19.2
%%For: MSI
%%CreationDate: 3/27/2021
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.2.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.2.1 x147 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 5 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c111 79.158366, 2015/09/25-01:12:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">2002.i039.010.P.m004.c33.chatbot messenger AI isometric set</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2021-03-27T07:30:33+03:00</xmp:CreateDate>
         <xmp:ModifyDate>2021-03-27T07:30:33+03:00</xmp:ModifyDate>
         <xmp:MetadataDate>2021-03-27T07:30:33+03:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q8z1Tz9rmlebRZXqK&#xA;YJ7r6pbNFG/pqJZQluLkfG8ZfkAsyllav2EALZmnRmUOOB5DcH7aPl3McepxgmGQddpDp7xyr5e9&#xA;6NDdRSRci68lUNIFIPHbfMOQpkBazT9SsdRtlubKZZoWpRlqCKgMAymhU0INCMhGQkLDbmwzxy4Z&#xA;iiick1OxV2KuxV2KuxV2KpdqerNZywxpA0okNZphQRwxqRzeRiRQAYk0248XFe4/SfILdO8w6fqV&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:OriginalDocumentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:867ace14-6b1f-b346-ac1f-0fe310b69e32</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:867ace14-6b1f-b346-ac1f-0fe310b69e32</xmpMM:InstanceID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:fb9a4a3b-55ef-410b-86d2-1ef2587a46cc</stRef:instanceID>
            <stRef:documentID>xmp.did:2dbddf57-5c96-1847-b9e6-50a422aaccff</stRef:documentID>
            <stRef:originalDocumentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:3a20f972-edde-0b45-bb2e-054a8dc7c649</stEvt:instanceID>
                  <stEvt:when>2018-10-13T13:53:22+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2017 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:43832778-9d0f-074b-a9ab-a300dea7487c</stEvt:instanceID>
                  <stEvt:when>2020-02-18T18:49:22+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:2dbddf57-5c96-1847-b9e6-50a422aaccff</stEvt:instanceID>
                  <stEvt:when>2021-03-26T09:14:28+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:867ace14-6b1f-b346-ac1f-0fe310b69e32</stEvt:instanceID>
                  <stEvt:when>2021-03-27T07:30:33+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Basic RGB</illustrator:StartupProfile>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
256.46 343.98 mo
233.381 343.98 li
211.711 277.424 li
267.278 246.906 li
345.028 292.775 li
256.46 343.98 li
false sop
/0 
[/DeviceRGB] /CSA add_res
.94316 .930135 .915925 rgb
f
148.729 273.151 mo
152.857 270.753 li
158.454 273.984 li
154.326 276.383 li
148.729 273.151 li
cp
.894118 .890196 .933333 rgb
f
159.304 271.354 mo
163.432 268.955 li
159.208 275.855 li
155.081 278.254 li
159.304 271.354 li
cp
.717647 .713726 .890196 rgb
f
169.068 275.558 mo
173.196 273.16 li
173.192 274.59 li
169.065 276.989 li
169.068 275.558 li
cp
.568627 .615686 .839216 rgb
f
158.55 269.485 mo
162.677 267.087 li
173.196 273.16 li
169.068 275.558 li
158.55 269.485 li
cp
.894118 .890196 .933333 rgb
f
169.068 275.558 mo
169.065 276.989 li
159.304 271.354 li
155.081 278.254 li
148.726 274.584 li
148.729 273.151 li
154.326 276.383 li
158.55 269.485 li
169.068 275.558 li
cp
.568627 .615686 .839216 rgb
f
164.06 264.42 mo
168.187 262.022 li
173.783 265.253 li
169.656 267.652 li
164.06 264.42 li
cp
.894118 .890196 .933333 rgb
f
174.635 262.623 mo
178.762 260.224 li
174.539 267.124 li
170.411 269.522 li
174.635 262.623 li
cp
.717647 .713726 .890196 rgb
f
184.399 266.827 mo
188.525 264.429 li
188.522 265.859 li
184.394 268.258 li
184.399 266.827 li
cp
.568627 .615686 .839216 rgb
f
173.879 260.754 mo
178.007 258.355 li
188.525 264.429 li
184.399 266.827 li
173.879 260.754 li
cp
.894118 .890196 .933333 rgb
f
184.399 266.827 mo
184.394 268.258 li
174.635 262.623 li
170.411 269.522 li
164.055 265.853 li
164.06 264.42 li
169.656 267.652 li
173.879 260.754 li
184.399 266.827 li
cp
.568627 .615686 .839216 rgb
f
178.741 255.675 mo
182.868 253.276 li
188.465 256.508 li
184.338 258.906 li
178.741 255.675 li
cp
.894118 .890196 .933333 rgb
f
189.316 253.877 mo
193.443 251.479 li
189.22 258.379 li
185.093 260.777 li
189.316 253.877 li
cp
.717647 .713726 .890196 rgb
f
199.08 258.082 mo
203.207 255.684 li
203.203 257.114 li
199.076 259.513 li
199.08 258.082 li
cp
.568627 .615686 .839216 rgb
f
188.561 252.009 mo
192.688 249.61 li
203.207 255.684 li
199.08 258.082 li
188.561 252.009 li
cp
.894118 .890196 .933333 rgb
f
199.08 258.082 mo
199.076 259.513 li
189.316 253.877 li
185.093 260.777 li
178.737 257.107 li
178.741 255.675 li
184.338 258.906 li
188.561 252.009 li
199.08 258.082 li
cp
.568627 .615686 .839216 rgb
f
133.575 282.648 mo
137.702 280.25 li
143.299 283.481 li
139.172 285.879 li
133.575 282.648 li
cp
.894118 .890196 .933333 rgb
f
144.15 280.851 mo
148.277 278.453 li
144.054 285.352 li
139.927 287.75 li
144.15 280.851 li
cp
.717647 .713726 .890196 rgb
f
153.914 285.055 mo
158.041 282.657 li
158.037 284.087 li
153.91 286.486 li
153.914 285.055 li
cp
.568627 .615686 .839216 rgb
f
143.395 278.982 mo
147.523 276.583 li
158.041 282.657 li
153.914 285.055 li
143.395 278.982 li
cp
.894118 .890196 .933333 rgb
f
153.914 285.055 mo
153.91 286.486 li
144.15 280.851 li
139.927 287.75 li
133.571 284.081 li
133.575 282.648 li
139.172 285.879 li
143.395 278.982 li
153.914 285.055 li
cp
.568627 .615686 .839216 rgb
f
195.062 246.453 mo
199.189 244.054 li
204.786 247.285 li
200.659 249.684 li
195.062 246.453 li
cp
.894118 .890196 .933333 rgb
f
205.637 244.656 mo
209.764 242.257 li
205.541 249.156 li
201.414 251.555 li
205.637 244.656 li
cp
.717647 .713726 .890196 rgb
f
215.401 248.859 mo
219.528 246.461 li
219.524 247.892 li
215.397 250.29 li
215.401 248.859 li
cp
.568627 .615686 .839216 rgb
f
204.882 242.786 mo
209.009 240.388 li
219.528 246.461 li
215.401 248.859 li
204.882 242.786 li
cp
.894118 .890196 .933333 rgb
f
215.401 248.859 mo
215.397 250.29 li
205.637 244.656 li
201.414 251.555 li
195.058 247.885 li
195.062 246.453 li
200.659 249.684 li
204.882 242.786 li
215.401 248.859 li
cp
.568627 .615686 .839216 rgb
f
210.747 237.547 mo
214.874 235.148 li
220.471 238.379 li
216.344 240.778 li
210.747 237.547 li
cp
.894118 .890196 .933333 rgb
f
221.322 235.75 mo
225.449 233.351 li
221.226 240.25 li
217.099 242.649 li
221.322 235.75 li
cp
.717647 .713726 .890196 rgb
f
231.087 239.953 mo
235.213 237.555 li
235.21 238.986 li
231.082 241.385 li
231.087 239.953 li
cp
.568627 .615686 .839216 rgb
f
220.567 233.881 mo
224.695 231.482 li
235.213 237.555 li
231.087 239.953 li
220.567 233.881 li
cp
.894118 .890196 .933333 rgb
f
231.087 239.953 mo
231.082 241.385 li
221.322 235.75 li
217.099 242.649 li
210.743 238.98 li
210.747 237.547 li
216.344 240.778 li
220.567 233.881 li
231.087 239.953 li
cp
.568627 .615686 .839216 rgb
f
316.738 273.365 mo
312.611 270.967 li
307.014 274.198 li
311.142 276.597 li
316.738 273.365 li
cp
.894118 .890196 .933333 rgb
f
306.163 271.568 mo
302.036 269.17 li
306.26 276.069 li
310.387 278.467 li
306.163 271.568 li
cp
.717647 .713726 .890196 rgb
f
296.399 275.772 mo
292.272 273.374 li
292.277 274.804 li
296.403 277.203 li
296.399 275.772 li
cp
.568627 .615686 .839216 rgb
f
306.918 269.699 mo
302.791 267.301 li
292.272 273.374 li
296.399 275.772 li
306.918 269.699 li
cp
.894118 .890196 .933333 rgb
f
296.399 275.772 mo
296.403 277.203 li
306.163 271.568 li
310.387 278.467 li
316.742 274.798 li
316.738 273.365 li
311.142 276.597 li
306.918 269.699 li
296.399 275.772 li
cp
.568627 .615686 .839216 rgb
f
301.408 264.634 mo
297.281 262.236 li
291.685 265.467 li
295.812 267.865 li
301.408 264.634 li
cp
.894118 .890196 .933333 rgb
f
290.833 262.836 mo
286.706 260.438 li
290.929 267.338 li
295.056 269.736 li
290.833 262.836 li
cp
.717647 .713726 .890196 rgb
f
281.069 267.041 mo
276.942 264.643 li
276.946 266.073 li
281.074 268.472 li
281.069 267.041 li
cp
.568627 .615686 .839216 rgb
f
291.589 260.968 mo
287.461 258.57 li
276.942 264.643 li
281.069 267.041 li
291.589 260.968 li
cp
.894118 .890196 .933333 rgb
f
281.069 267.041 mo
281.074 268.472 li
290.833 262.836 li
295.056 269.736 li
301.413 266.066 li
301.408 264.634 li
295.812 267.865 li
291.589 260.968 li
281.069 267.041 li
cp
.568627 .615686 .839216 rgb
f
286.727 255.889 mo
282.6 253.491 li
277.003 256.722 li
281.13 259.12 li
286.727 255.889 li
cp
.894118 .890196 .933333 rgb
f
276.152 254.092 mo
272.025 251.693 li
276.248 258.593 li
280.375 260.991 li
276.152 254.092 li
cp
.717647 .713726 .890196 rgb
f
266.388 258.296 mo
262.261 255.898 li
262.265 257.328 li
266.392 259.726 li
266.388 258.296 li
cp
.568627 .615686 .839216 rgb
f
276.907 252.223 mo
272.78 249.824 li
262.261 255.898 li
266.388 258.296 li
276.907 252.223 li
cp
.894118 .890196 .933333 rgb
f
266.388 258.296 mo
266.392 259.726 li
276.152 254.092 li
280.375 260.991 li
286.731 257.322 li
286.727 255.889 li
281.13 259.12 li
276.907 252.223 li
266.388 258.296 li
cp
.568627 .615686 .839216 rgb
f
331.893 282.862 mo
327.766 280.463 li
322.169 283.695 li
326.296 286.094 li
331.893 282.862 li
cp
.894118 .890196 .933333 rgb
f
321.318 281.065 mo
317.191 278.667 li
321.414 285.566 li
325.541 287.964 li
321.318 281.065 li
cp
.717647 .713726 .890196 rgb
f
311.554 285.269 mo
307.426 282.871 li
307.431 284.301 li
311.558 286.7 li
311.554 285.269 li
cp
.568627 .615686 .839216 rgb
f
322.073 279.196 mo
317.946 276.797 li
307.426 282.871 li
311.554 285.269 li
322.073 279.196 li
cp
.894118 .890196 .933333 rgb
f
311.554 285.269 mo
311.558 286.7 li
321.318 281.065 li
325.541 287.964 li
331.897 284.295 li
331.893 282.862 li
326.296 286.094 li
322.073 279.196 li
311.554 285.269 li
cp
.568627 .615686 .839216 rgb
f
270.406 246.667 mo
266.279 244.268 li
260.682 247.499 li
264.81 249.898 li
270.406 246.667 li
cp
.894118 .890196 .933333 rgb
f
259.831 244.869 mo
255.704 242.471 li
259.927 249.37 li
264.054 251.769 li
259.831 244.869 li
cp
.717647 .713726 .890196 rgb
f
250.067 249.073 mo
245.94 246.675 li
245.944 248.106 li
250.071 250.504 li
250.067 249.073 li
cp
.568627 .615686 .839216 rgb
f
260.586 243.001 mo
256.459 240.602 li
245.94 246.675 li
250.067 249.073 li
260.586 243.001 li
cp
.894118 .890196 .933333 rgb
f
250.067 249.073 mo
250.071 250.504 li
259.831 244.869 li
264.054 251.769 li
270.41 248.099 li
270.406 246.667 li
264.81 249.898 li
260.586 243.001 li
250.067 249.073 li
cp
.568627 .615686 .839216 rgb
f
254.721 237.761 mo
250.593 235.362 li
244.997 238.594 li
249.124 240.992 li
254.721 237.761 li
cp
.894118 .890196 .933333 rgb
f
244.146 235.963 mo
240.018 233.565 li
244.242 240.464 li
248.369 242.863 li
244.146 235.963 li
cp
.717647 .713726 .890196 rgb
f
234.382 240.168 mo
230.254 237.769 li
230.258 239.2 li
234.386 241.599 li
234.382 240.168 li
cp
.568627 .615686 .839216 rgb
f
244.901 234.095 mo
240.773 231.696 li
230.254 237.769 li
234.382 240.168 li
244.901 234.095 li
cp
.894118 .890196 .933333 rgb
f
234.382 240.168 mo
234.386 241.599 li
244.146 235.963 li
248.369 242.863 li
254.725 239.193 li
254.721 237.761 li
249.124 240.992 li
244.901 234.095 li
234.382 240.168 li
cp
.568627 .615686 .839216 rgb
f
321.867 282.692 mo
321.838 292.576 li
233.387 343.979 li
233.415 334.095 li
321.867 282.692 li
cp
.0705882 .690196 .952941 rgb
f
233.415 334.095 mo
233.387 343.979 li
144.357 292.577 li
144.385 282.693 li
233.415 334.095 li
cp
.0745098 .576471 .94902 rgb
f
321.867 282.692 mo
233.415 334.095 li
144.385 282.693 li
232.836 231.29 li
321.867 282.692 li
cp
.0196078 .831373 .960784 rgb
f
300.667 280.185 mo
300.652 285.127 li
233.325 324.254 li
233.339 319.312 li
300.667 280.185 li
cp
.831373 .835294 .941176 rgb
f
233.339 319.312 mo
233.325 324.254 li
165.557 285.128 li
165.571 280.186 li
233.339 319.312 li
cp
.768627 .764706 .92549 rgb
f
300.667 280.185 mo
233.339 319.312 li
165.571 280.186 li
232.899 241.06 li
300.667 280.185 li
cp
1 1 1 rgb
f
137.122 308.186 mo
132.995 305.787 li
137.165 294.044 li
141.293 296.442 li
137.122 308.186 li
cp
.768627 .764706 .92549 rgb
f
141.293 296.442 mo
137.165 294.044 li
147.684 287.971 li
151.812 290.369 li
141.293 296.442 li
cp
.894118 .890196 .933333 rgb
f
131.523 311.418 mo
127.396 309.02 li
132.995 305.787 li
137.122 308.186 li
131.523 311.418 li
cp
f
131.527 312.851 mo
127.4 310.453 li
127.396 309.02 li
131.523 311.418 li
131.527 312.851 li
cp
.717647 .713726 .890196 rgb
f
151.812 290.369 mo
151.816 291.8 li
142.054 297.436 li
137.885 309.181 li
131.527 312.851 li
131.523 311.418 li
137.122 308.186 li
141.293 296.442 li
151.812 290.369 li
cp
.568627 .615686 .839216 rgb
f
152.64 317.068 mo
148.513 314.669 li
152.684 302.926 li
156.81 305.324 li
152.64 317.068 li
cp
.768627 .764706 .92549 rgb
f
156.81 305.324 mo
152.684 302.926 li
163.202 296.852 li
167.33 299.251 li
156.81 305.324 li
cp
.894118 .890196 .933333 rgb
f
147.041 320.3 mo
142.914 317.901 li
148.513 314.669 li
152.64 317.068 li
147.041 320.3 li
cp
f
147.046 321.733 mo
142.918 319.334 li
142.914 317.901 li
147.041 320.3 li
147.046 321.733 li
cp
.717647 .713726 .890196 rgb
f
167.33 299.251 mo
167.334 300.682 li
157.571 306.317 li
153.403 318.062 li
147.046 321.733 li
147.041 320.3 li
152.64 317.068 li
156.81 305.324 li
167.33 299.251 li
cp
.568627 .615686 .839216 rgb
f
168.034 326.041 mo
163.907 323.643 li
168.078 311.899 li
172.205 314.297 li
168.034 326.041 li
cp
.768627 .764706 .92549 rgb
f
172.205 314.297 mo
168.078 311.899 li
178.597 305.826 li
182.724 308.224 li
172.205 314.297 li
cp
.894118 .890196 .933333 rgb
f
162.435 329.274 mo
158.308 326.875 li
163.907 323.643 li
168.034 326.041 li
162.435 329.274 li
cp
f
162.44 330.706 mo
158.312 328.308 li
158.308 326.875 li
162.435 329.274 li
162.44 330.706 li
cp
.717647 .713726 .890196 rgb
f
182.724 308.224 mo
182.728 309.655 li
172.966 315.291 li
168.797 327.036 li
162.44 330.706 li
162.435 329.274 li
168.034 326.041 li
172.205 314.297 li
182.724 308.224 li
cp
.568627 .615686 .839216 rgb
f
183.423 334.95 mo
179.296 332.552 li
183.467 320.808 li
187.594 323.206 li
183.423 334.95 li
cp
.768627 .764706 .92549 rgb
f
187.594 323.206 mo
183.467 320.808 li
193.986 314.735 li
198.114 317.133 li
187.594 323.206 li
cp
.894118 .890196 .933333 rgb
f
177.825 338.183 mo
173.697 335.784 li
179.296 332.552 li
183.423 334.95 li
177.825 338.183 li
cp
f
177.829 339.616 mo
173.701 337.217 li
173.697 335.784 li
177.825 338.183 li
177.829 339.616 li
cp
.717647 .713726 .890196 rgb
f
198.114 317.133 mo
198.118 318.563 li
188.355 324.2 li
184.187 335.945 li
177.829 339.616 li
177.825 338.183 li
183.423 334.95 li
187.594 323.206 li
198.114 317.133 li
cp
.568627 .615686 .839216 rgb
f
199.008 343.798 mo
194.881 341.399 li
199.052 329.655 li
203.179 332.054 li
199.008 343.798 li
cp
.768627 .764706 .92549 rgb
f
203.179 332.054 mo
199.052 329.655 li
209.571 323.582 li
213.699 325.981 li
203.179 332.054 li
cp
.894118 .890196 .933333 rgb
f
193.409 347.031 mo
189.282 344.632 li
194.881 341.399 li
199.008 343.798 li
193.409 347.031 li
cp
f
193.413 348.463 mo
189.286 346.065 li
189.282 344.632 li
193.409 347.031 li
193.413 348.463 li
cp
.717647 .713726 .890196 rgb
f
213.699 325.981 mo
213.702 327.411 li
203.94 333.047 li
199.771 344.792 li
193.413 348.463 li
193.409 347.031 li
199.008 343.798 li
203.179 332.054 li
213.699 325.981 li
cp
.568627 .615686 .839216 rgb
f
214.293 352.722 mo
210.166 350.323 li
214.336 338.579 li
218.463 340.978 li
214.293 352.722 li
cp
.768627 .764706 .92549 rgb
f
218.463 340.978 mo
214.336 338.579 li
224.855 332.505 li
228.983 334.905 li
218.463 340.978 li
cp
.894118 .890196 .933333 rgb
f
208.694 355.954 mo
204.567 353.556 li
210.166 350.323 li
214.293 352.722 li
208.694 355.954 li
cp
f
208.698 357.387 mo
204.571 354.989 li
204.567 353.556 li
208.694 355.954 li
208.698 357.387 li
cp
.717647 .713726 .890196 rgb
f
228.983 334.905 mo
228.987 336.335 li
219.224 341.971 li
215.056 353.716 li
208.698 357.387 li
208.694 355.954 li
214.293 352.722 li
218.463 340.978 li
228.983 334.905 li
cp
.568627 .615686 .839216 rgb
f
329.436 308.348 mo
333.563 305.95 li
329.393 294.206 li
325.265 296.605 li
329.436 308.348 li
cp
.768627 .764706 .92549 rgb
f
325.265 296.605 mo
329.393 294.206 li
318.874 288.133 li
314.747 290.532 li
325.265 296.605 li
cp
.894118 .890196 .933333 rgb
f
335.034 311.581 mo
339.162 309.183 li
333.563 305.95 li
329.436 308.348 li
335.034 311.581 li
cp
f
335.031 313.013 mo
339.158 310.615 li
339.162 309.183 li
335.034 311.581 li
335.031 313.013 li
cp
.717647 .713726 .890196 rgb
f
314.747 290.532 mo
314.743 291.962 li
324.504 297.598 li
328.672 309.343 li
335.031 313.013 li
335.034 311.581 li
329.436 308.348 li
325.265 296.605 li
314.747 290.532 li
cp
.568627 .615686 .839216 rgb
f
313.918 317.23 mo
318.045 314.831 li
313.875 303.088 li
309.747 305.487 li
313.918 317.23 li
cp
.768627 .764706 .92549 rgb
f
309.747 305.487 mo
313.875 303.088 li
303.355 297.015 li
299.229 299.413 li
309.747 305.487 li
cp
.894118 .890196 .933333 rgb
f
319.516 320.462 mo
323.644 318.064 li
318.045 314.831 li
313.918 317.23 li
319.516 320.462 li
cp
f
319.513 321.895 mo
323.64 319.496 li
323.644 318.064 li
319.516 320.462 li
319.513 321.895 li
cp
.717647 .713726 .890196 rgb
f
299.229 299.413 mo
299.224 300.843 li
308.986 306.48 li
313.154 318.224 li
319.513 321.895 li
319.516 320.462 li
313.918 317.23 li
309.747 305.487 li
299.229 299.413 li
cp
.568627 .615686 .839216 rgb
f
298.523 326.203 mo
302.651 323.805 li
298.48 312.062 li
294.353 314.46 li
298.523 326.203 li
cp
.768627 .764706 .92549 rgb
f
294.353 314.46 mo
298.48 312.062 li
287.961 305.988 li
283.834 308.387 li
294.353 314.46 li
cp
.894118 .890196 .933333 rgb
f
304.122 329.436 mo
308.25 327.037 li
302.651 323.805 li
298.523 326.203 li
304.122 329.436 li
cp
f
304.118 330.869 mo
308.246 328.47 li
308.25 327.037 li
304.122 329.436 li
304.118 330.869 li
cp
.717647 .713726 .890196 rgb
f
283.834 308.387 mo
283.83 309.818 li
293.592 315.453 li
297.761 327.198 li
304.118 330.869 li
304.122 329.436 li
298.523 326.203 li
294.353 314.46 li
283.834 308.387 li
cp
.568627 .615686 .839216 rgb
f
283.134 335.113 mo
287.261 332.714 li
283.091 320.97 li
278.964 323.369 li
283.134 335.113 li
cp
.768627 .764706 .92549 rgb
f
278.964 323.369 mo
283.091 320.97 li
272.571 314.897 li
268.444 317.295 li
278.964 323.369 li
cp
.894118 .890196 .933333 rgb
f
288.733 338.345 mo
292.86 335.947 li
287.261 332.714 li
283.134 335.113 li
288.733 338.345 li
cp
f
288.729 339.778 mo
292.857 337.38 li
292.86 335.947 li
288.733 338.345 li
288.729 339.778 li
cp
.717647 .713726 .890196 rgb
f
268.444 317.295 mo
268.44 318.726 li
278.202 324.362 li
282.371 336.107 li
288.729 339.778 li
288.733 338.345 li
283.134 335.113 li
278.964 323.369 li
268.444 317.295 li
cp
.568627 .615686 .839216 rgb
f
267.549 343.96 mo
271.677 341.562 li
267.507 329.818 li
263.379 332.216 li
267.549 343.96 li
cp
.768627 .764706 .92549 rgb
f
263.379 332.216 mo
267.507 329.818 li
256.987 323.744 li
252.859 326.143 li
263.379 332.216 li
cp
.894118 .890196 .933333 rgb
f
273.149 347.193 mo
277.276 344.794 li
271.677 341.562 li
267.549 343.96 li
273.149 347.193 li
cp
f
273.144 348.626 mo
277.272 346.227 li
277.276 344.794 li
273.149 347.193 li
273.144 348.626 li
cp
.717647 .713726 .890196 rgb
f
252.859 326.143 mo
252.856 327.574 li
262.618 333.21 li
266.786 344.955 li
273.144 348.626 li
273.149 347.193 li
267.549 343.96 li
263.379 332.216 li
252.859 326.143 li
cp
.568627 .615686 .839216 rgb
f
252.265 352.884 mo
256.392 350.485 li
252.222 338.742 li
248.094 341.14 li
252.265 352.884 li
cp
.768627 .764706 .92549 rgb
f
248.094 341.14 mo
252.222 338.742 li
241.702 332.668 li
237.575 335.066 li
248.094 341.14 li
cp
.894118 .890196 .933333 rgb
f
257.864 356.117 mo
261.992 353.718 li
256.392 350.485 li
252.265 352.884 li
257.864 356.117 li
cp
f
257.86 357.55 mo
261.987 355.151 li
261.992 353.718 li
257.864 356.117 li
257.86 357.55 li
cp
.717647 .713726 .890196 rgb
f
237.575 335.066 mo
237.571 336.498 li
247.333 342.134 li
251.501 353.879 li
257.86 357.55 li
257.864 356.117 li
252.265 352.884 li
248.094 341.14 li
237.575 335.066 li
cp
.568627 .615686 .839216 rgb
f
188.946 280.185 mo
192.254 282.095 li
232.973 305.606 li
232.973 254.598 li
188.946 280.185 li
cp
.831373 .835294 .941176 rgb
f
232.973 254.598 mo
232.973 305.606 li
233.262 305.773 li
273.984 282.107 li
277.292 280.185 li
232.973 254.598 li
cp
.768627 .764706 .92549 rgb
f
273.984 282.107 mo
233.262 305.773 li
192.254 282.095 li
232.973 258.429 li
273.984 282.107 li
cp
.0196078 .831373 .960784 rgb
f
273.984 282.107 mo
233.262 305.773 li
192.254 282.095 li
232.973 258.429 li
273.984 282.107 li
cp
f
255.132 278.579 mo
255.125 281.05 li
250.293 283.858 li
250.3 281.387 li
255.132 278.579 li
cp
.831373 .835294 .941176 rgb
f
250.3 281.387 mo
250.293 283.858 li
228.69 271.385 li
228.697 268.915 li
250.3 281.387 li
cp
.768627 .764706 .92549 rgb
f
255.132 278.579 mo
250.3 281.387 li
228.697 268.915 li
233.529 266.106 li
255.132 278.579 li
cp
.933333 .937255 .94902 rgb
f
231.09 282.654 mo
231.083 285.125 li
229.817 284.775 228.604 284.445 227.443 284.131 cv
226.281 283.817 225.209 283.536 224.224 283.288 cv
223.239 283.04 222.371 282.823 221.624 282.631 cv
220.874 282.441 220.283 282.296 219.846 282.193 cv
219.853 279.722 li
220.29 279.825 220.881 279.97 221.63 280.161 cv
222.378 280.351 223.245 280.569 224.231 280.817 cv
225.216 281.066 226.288 281.346 227.45 281.66 cv
228.611 281.974 229.824 282.305 231.09 282.654 cv
cp
.0745098 .576471 .94902 rgb
f
gsave
231.09 282.654 mo
231.083 285.125 li
229.817 284.775 228.604 284.445 227.443 284.131 cv
226.281 283.817 225.209 283.536 224.224 283.288 cv
223.239 283.04 222.371 282.823 221.624 282.631 cv
220.874 282.441 220.283 282.296 219.846 282.194 cv
219.853 279.722 li
220.29 279.825 220.881 279.97 221.63 280.161 cv
222.378 280.351 223.245 280.569 224.231 280.817 cv
225.216 281.066 226.288 281.346 227.45 281.659 cv
228.611 281.974 229.824 282.305 231.09 282.654 cv
clp
231.09 282.654 mo
231.083 285.125 li
229.817 284.775 228.604 284.445 227.443 284.131 cv
226.281 283.817 225.209 283.536 224.224 283.288 cv
223.239 283.04 222.371 282.823 221.624 282.631 cv
220.874 282.441 220.283 282.296 219.846 282.193 cv
219.853 279.722 li
220.29 279.825 220.881 279.97 221.63 280.161 cv
222.378 280.351 223.245 280.569 224.231 280.817 cv
225.216 281.066 226.288 281.346 227.45 281.66 cv
228.611 281.974 229.824 282.305 231.09 282.654 cv
cp
.768627 .764706 .92549 rgb
f
grestore
239.287 285.108 mo
239.28 287.579 li
238.213 287.282 237.15 286.987 236.096 286.692 cv
236.102 284.221 li
237.158 284.516 238.22 284.811 239.287 285.108 cv
cp
f
gsave
239.287 285.108 mo
239.28 287.579 li
238.213 287.282 237.15 286.987 236.096 286.692 cv
236.102 284.221 li
237.158 284.516 238.22 284.811 239.287 285.108 cv
clp
239.287 285.108 mo
239.28 287.579 li
238.213 287.282 237.15 286.987 236.096 286.692 cv
236.102 284.221 li
237.158 284.516 238.22 284.811 239.287 285.108 cv
cp
.768627 .764706 .92549 rgb
f
grestore
242.368 285.996 mo
242.361 288.468 li
241.373 288.173 240.346 287.876 239.28 287.579 cv
239.287 285.108 li
240.353 285.405 241.379 285.701 242.368 285.996 cv
cp
f
gsave
242.368 285.996 mo
242.361 288.468 li
241.373 288.173 240.346 287.876 239.28 287.579 cv
239.287 285.108 li
240.353 285.405 241.379 285.701 242.368 285.996 cv
clp
242.368 285.996 mo
242.361 288.468 li
241.373 288.173 240.346 287.876 239.28 287.579 cv
239.287 285.108 li
240.353 285.405 241.379 285.701 242.368 285.996 cv
cp
.768627 .764706 .92549 rgb
f
grestore
247.543 282.989 mo
247.536 285.461 li
242.361 288.468 li
242.368 285.996 li
247.543 282.989 li
cp
.831373 .835294 .941176 rgb
f
236.102 284.221 mo
236.096 286.692 li
227.712 291.564 li
227.719 289.093 li
236.102 284.221 li
cp
f
225.801 295.624 mo
225.795 298.095 li
224.274 296.282 222.891 294.594 221.642 293.033 cv
220.393 291.472 219.238 289.986 218.189 288.576 cv
217.135 287.163 216.163 285.809 215.266 284.512 cv
214.372 283.215 213.537 281.925 212.765 280.64 cv
212.772 278.169 li
213.544 279.454 214.379 280.745 215.273 282.041 cv
216.17 283.338 217.142 284.693 218.196 286.105 cv
219.245 287.515 220.4 289.001 221.649 290.563 cv
222.898 292.123 224.281 293.811 225.801 295.624 cv
cp
.0745098 .576471 .94902 rgb
f
gsave
225.801 295.624 mo
225.795 298.095 li
224.274 296.282 222.891 294.594 221.642 293.033 cv
220.393 291.472 219.238 289.986 218.189 288.576 cv
217.135 287.163 216.163 285.809 215.266 284.512 cv
214.372 283.215 213.537 281.925 212.765 280.64 cv
212.772 278.169 li
213.544 279.454 214.378 280.745 215.273 282.041 cv
216.17 283.338 217.142 284.693 218.196 286.105 cv
219.245 287.515 220.4 289.001 221.649 290.562 cv
222.898 292.123 224.281 293.811 225.801 295.624 cv
clp
225.801 295.624 mo
225.795 298.095 li
224.274 296.282 222.891 294.594 221.642 293.033 cv
220.393 291.472 219.238 289.986 218.189 288.576 cv
217.135 287.163 216.163 285.809 215.266 284.512 cv
214.372 283.215 213.537 281.925 212.765 280.64 cv
212.772 278.169 li
213.544 279.454 214.379 280.745 215.273 282.041 cv
216.17 283.338 217.142 284.693 218.196 286.105 cv
219.245 287.515 220.4 289.001 221.649 290.563 cv
222.898 292.123 224.281 293.811 225.801 295.624 cv
cp
.768627 .764706 .92549 rgb
f
grestore
230.818 292.709 mo
230.811 295.18 li
225.795 298.095 li
225.801 295.624 li
230.818 292.709 li
cp
.831373 .835294 .941176 rgb
f
224.952 286.221 mo
231.09 282.654 li
229.824 282.305 228.611 281.974 227.45 281.66 cv
226.288 281.346 225.216 281.066 224.231 280.817 cv
223.245 280.569 222.378 280.351 221.63 280.161 cv
220.881 279.97 220.29 279.825 219.853 279.722 cv
220.059 279.966 220.329 280.304 220.661 280.737 cv
220.994 281.169 221.385 281.666 221.825 282.229 cv
222.269 282.792 222.75 283.415 223.273 284.096 cv
223.798 284.777 224.356 285.487 224.952 286.221 cv
cp
239.287 285.108 mo
238.22 284.811 237.158 284.516 236.102 284.221 cv
227.719 289.093 li
228.236 289.705 228.754 290.319 229.273 290.935 cv
229.791 291.55 230.309 292.141 230.818 292.709 cv
225.801 295.624 li
224.281 293.811 222.898 292.123 221.649 290.563 cv
220.4 289.001 219.245 287.515 218.196 286.105 cv
217.142 284.693 216.17 283.338 215.273 282.041 cv
214.379 280.745 213.544 279.454 212.772 278.169 cv
217.352 275.507 li
219.554 275.961 221.782 276.443 224.034 276.95 cv
226.288 277.459 228.635 278.014 231.078 278.618 cv
233.517 279.221 236.088 279.884 238.789 280.602 cv
241.49 281.319 244.407 282.115 247.543 282.989 cv
242.368 285.996 li
241.379 285.701 240.353 285.405 239.287 285.108 cv
cp
.933333 .937255 .94902 rgb
f
91.1299 298.518 mo
233.594 380.769 li
375.122 298.522 li
232.658 216.271 li
91.1299 298.518 li
cp
233.597 383.02 mo
87.2451 298.523 li
232.655 214.021 li
379.006 298.516 li
233.597 383.02 li
cp
.0196078 .831373 .960784 rgb
f
109.943 310.503 mo
99.1235 316.749 li
98.9625 316.841 98.7675 316.841 98.6105 316.749 cv
87.5132 310.342 li
51.4933 331.139 li
48.1361 333.077 li
47.8796 333.145 li
47.7021 333.145 47.5309 333.053 47.4354 332.889 cv
47.2954 332.646 47.3773 332.331 47.6236 332.188 cv
50.4542 330.554 li
87.2568 309.307 li
87.4138 309.217 87.6088 309.217 87.7697 309.307 cv
98.867 315.713 li
108.918 309.912 li
109.943 310.503 li
cp
f
197.199 359.897 mo
195.49 360.881 li
185.644 366.567 li
185.487 366.659 185.292 366.659 185.131 366.567 cv
174.038 360.16 li
160.031 368.245 li
159.005 368.837 li
137.727 381.124 li
134.661 382.895 li
134.404 382.963 li
134.227 382.963 134.056 382.871 133.96 382.706 cv
133.82 382.461 133.902 382.149 134.148 382.006 cv
136.88 380.43 li
157.98 368.245 li
159.005 367.654 li
173.781 359.124 li
173.938 359.032 174.133 359.032 174.294 359.124 cv
185.388 365.531 li
194.464 360.29 li
196.174 359.302 li
197.199 359.897 li
cp
f
163.525 340.451 mo
161.816 341.439 li
152.243 346.967 li
152.086 347.056 151.891 347.056 151.73 346.967 cv
140.637 340.56 li
126.36 348.803 li
125.334 349.395 li
104.88 361.206 li
101.26 363.295 li
101.003 363.364 li
100.826 363.364 100.655 363.271 100.559 363.107 cv
100.419 362.861 100.501 362.546 100.747 362.406 cv
104.056 360.495 li
124.309 348.803 li
125.334 348.212 li
140.38 339.525 li
140.537 339.432 140.732 339.432 140.893 339.525 cv
151.987 345.932 li
160.79 340.848 li
162.5 339.86 li
163.525 340.451 li
cp
f
136.664 324.944 mo
134.952 325.932 li
98.7607 346.827 li
96.0363 348.399 li
95.7798 348.468 li
95.6019 348.468 95.4307 348.375 95.3351 348.212 cv
95.1918 347.969 95.2771 347.654 95.5234 347.51 cv
97.7864 346.205 li
133.926 325.337 li
135.638 324.349 li
136.664 324.944 li
cp
f
209.582 367.046 mo
207.873 368.03 li
172.181 388.638 li
169.422 390.231 li
169.166 390.3 li
168.988 390.3 168.817 390.207 168.722 390.043 cv
168.578 389.797 168.663 389.483 168.91 389.342 cv
171.145 388.054 li
206.847 367.438 li
208.556 366.451 li
209.582 367.046 li
cp
f
175.046 347.104 mo
173.337 348.092 li
149.231 362.009 li
148.206 362.601 li
137.276 368.916 li
137.272 368.916 li
134.411 370.567 li
134.154 370.635 li
133.977 370.635 133.806 370.546 133.71 370.378 cv
133.57 370.136 133.652 369.821 133.898 369.681 cv
136.268 368.314 li
147.184 362.009 li
148.206 361.418 li
172.311 347.5 li
174.02 346.513 li
175.046 347.104 li
cp
f
174.52 376.611 mo
160.999 384.416 li
157.221 386.597 li
156.708 385.708 li
160.106 383.746 li
172.468 376.611 li
159.005 368.837 li
157.98 368.245 li
148.206 362.601 li
147.184 362.009 li
125.334 349.395 li
124.309 348.803 li
115.424 343.672 li
140.377 329.063 li
142.076 328.069 li
143.098 328.657 li
141.399 329.651 li
117.465 343.668 li
125.334 348.212 li
126.36 348.803 li
148.206 361.418 li
149.231 362.009 li
159.005 367.654 li
160.031 368.245 li
174.52 376.611 li
cp
f
51.0603 330.84 mo
52.5871 331.721 52.5871 333.151 51.0603 334.032 cv
49.5336 334.913 47.0589 334.913 45.5317 334.032 cv
44.0055 333.151 44.0055 331.721 45.5317 330.84 cv
47.0589 329.958 49.5336 329.958 51.0603 330.84 cv
cp
f
118.23 329.306 mo
118.23 329.491 118.135 329.658 117.974 329.75 cv
86.9593 347.658 li
84.1219 349.295 li
83.8654 349.363 li
83.6879 349.363 83.5167 349.275 83.4207 349.107 cv
83.2807 348.865 83.3626 348.55 83.6089 348.41 cv
85.9641 347.049 li
116.692 329.306 li
105.284 322.718 li
105.123 322.629 105.027 322.459 105.027 322.277 cv
105.027 322.092 105.123 321.922 105.284 321.833 cv
116.569 315.317 li
118.278 314.328 li
119.307 314.921 li
117.594 315.908 li
106.566 322.277 li
117.974 328.862 li
118.135 328.954 118.23 329.125 118.23 329.306 cv
cp
f
86.4327 347.278 mo
87.9594 348.16 87.9594 349.589 86.4327 350.47 cv
84.906 351.352 82.4303 351.352 80.9041 350.47 cv
79.3773 349.589 79.3773 348.16 80.9041 347.278 cv
82.4303 346.397 84.906 346.397 86.4327 347.278 cv
cp
f
216.266 385.212 mo
216.266 385.394 216.17 385.565 216.009 385.657 cv
185.805 403.096 li
182.157 405.202 li
181.901 405.27 li
181.726 405.27 181.552 405.178 181.456 405.014 cv
181.316 404.767 181.402 404.453 181.644 404.313 cv
184.821 402.48 li
214.728 385.212 li
203.319 378.625 li
203.162 378.532 203.063 378.365 203.063 378.18 cv
203.063 377.996 203.162 377.828 203.319 377.736 cv
214.003 371.568 li
215.712 370.584 li
216.734 371.175 li
215.025 372.16 li
204.601 378.18 li
216.009 384.768 li
216.17 384.86 216.266 385.028 216.266 385.212 cv
cp
f
185.254 402.692 mo
186.78 403.573 186.78 405.003 185.254 405.884 cv
183.727 406.766 181.252 406.766 179.725 405.884 cv
178.199 405.003 178.199 403.573 179.725 402.692 cv
181.252 401.811 183.727 401.811 185.254 402.692 cv
cp
f
98.1745 346.398 mo
99.7008 347.279 99.7008 348.708 98.1745 349.59 cv
96.6473 350.471 94.1727 350.471 92.6459 349.59 cv
91.1192 348.708 91.1192 347.279 92.6459 346.398 cv
94.1727 345.517 96.6473 345.517 98.1745 346.398 cv
cp
f
104.045 360.488 mo
105.572 361.369 105.572 362.798 104.045 363.68 cv
102.519 364.561 100.043 364.561 98.5169 363.68 cv
96.9896 362.798 96.9896 361.369 98.5169 360.488 cv
100.043 359.606 102.519 359.606 104.045 360.488 cv
cp
f
136.775 368.56 mo
138.302 369.442 138.302 370.871 136.775 371.752 cv
135.249 372.634 132.774 372.634 131.247 371.752 cv
129.72 370.871 129.72 369.442 131.247 368.56 cv
132.774 367.679 135.249 367.679 136.775 368.56 cv
cp
f
136.922 380.449 mo
138.449 381.33 138.449 382.76 136.922 383.641 cv
135.395 384.522 132.92 384.522 131.394 383.641 cv
129.867 382.76 129.867 381.33 131.394 380.449 cv
132.92 379.568 135.395 379.568 136.922 380.449 cv
cp
f
160.259 383.824 mo
161.785 384.706 161.785 386.135 160.259 387.017 cv
158.732 387.898 156.257 387.898 154.73 387.017 cv
153.204 386.135 153.204 384.706 154.73 383.824 cv
156.257 382.943 158.732 382.943 160.259 383.824 cv
cp
f
171.752 388.34 mo
173.279 389.221 173.279 390.65 171.752 391.532 cv
170.226 392.413 167.75 392.413 166.224 391.532 cv
164.697 390.65 164.697 389.221 166.224 388.34 cv
167.75 387.459 170.226 387.459 171.752 388.34 cv
cp
f
387.065 345.839 mo
386.97 346.003 386.799 346.095 386.621 346.095 cv
386.364 346.027 li
383.246 344.229 li
352.512 326.482 li
352.351 326.39 352.256 326.219 352.256 326.038 cv
352.256 325.853 352.351 325.686 352.512 325.593 cv
363.92 319.005 li
353.685 313.094 li
351.979 312.11 li
352.998 311.515 li
354.707 312.5 li
365.202 318.561 li
365.363 318.653 365.459 318.821 365.459 319.005 cv
365.459 319.19 365.363 319.358 365.202 319.45 cv
353.794 326.038 li
384.395 343.706 li
386.877 345.138 li
387.123 345.278 387.206 345.593 387.065 345.839 cv
cp
f
280.903 407.287 mo
280.808 407.451 280.637 407.544 280.459 407.544 cv
280.203 407.475 li
277.18 405.732 li
246.351 387.931 li
246.193 387.838 246.094 387.667 246.094 387.486 cv
246.094 387.301 246.193 387.134 246.351 387.042 cv
257.759 380.453 li
247.735 374.666 li
246.033 373.681 li
247.055 373.086 li
248.757 374.071 li
259.041 380.009 li
259.201 380.101 259.297 380.269 259.297 380.453 cv
259.297 380.635 259.201 380.806 259.041 380.898 cv
247.633 387.486 li
278.374 405.236 li
280.716 406.587 li
280.961 406.726 281.044 407.041 280.903 407.287 cv
cp
f
333.244 374.29 mo
333.149 374.454 332.974 374.546 332.8 374.546 cv
332.544 374.478 li
329.709 372.84 li
306.383 359.374 li
306.223 359.282 306.127 359.114 306.127 358.93 cv
306.127 358.745 306.223 358.577 306.383 358.485 cv
315.033 353.49 li
307.242 348.909 li
306.226 348.311 li
299.696 344.468 li
298.007 343.473 li
299.026 342.882 li
300.715 343.876 li
307.248 347.72 li
308.264 348.318 li
316.311 353.052 li
316.469 353.145 316.564 353.316 316.564 353.497 cv
316.56 353.682 316.465 353.849 316.308 353.942 cv
307.665 358.93 li
331.097 372.458 li
331.101 372.458 li
333.056 373.589 li
333.299 373.732 333.384 374.043 333.244 374.29 cv
cp
f
375.613 372.932 mo
375.517 373.097 375.346 373.189 375.168 373.189 cv
374.912 373.12 li
371.893 371.377 li
329.364 346.82 li
329.203 346.728 329.107 346.56 329.107 346.376 cv
329.107 346.194 329.203 346.024 329.364 345.932 cv
344.981 336.917 li
328.787 327.563 li
327.08 326.578 li
328.099 325.987 li
329.805 326.971 li
346.263 336.472 li
346.42 336.564 346.519 336.732 346.519 336.917 cv
346.519 337.101 346.42 337.269 346.263 337.361 cv
330.646 346.376 li
373.079 370.878 li
375.424 372.232 li
375.671 372.372 375.753 372.686 375.613 372.932 cv
cp
f
329.976 385.756 mo
329.884 385.92 329.709 386.012 329.532 386.012 cv
329.275 385.944 li
326.68 384.447 li
296.578 367.066 li
279.97 376.656 li
279.813 376.748 279.615 376.748 279.458 376.656 cv
261.827 366.474 li
260.124 365.49 li
261.143 364.898 li
262.846 365.883 li
279.714 375.62 li
296.322 366.03 li
296.483 365.938 296.677 365.938 296.835 366.03 cv
327.709 383.855 li
329.788 385.055 li
330.034 385.199 330.12 385.51 329.976 385.756 cv
cp
f
375.151 344.943 mo
375.055 345.108 374.884 345.2 374.707 345.2 cv
374.45 345.131 li
371.523 343.442 li
336.379 323.152 li
334.673 322.165 li
335.695 321.573 li
337.401 322.558 li
372.624 342.892 li
374.963 344.242 li
375.209 344.382 375.295 344.697 375.151 344.943 cv
cp
f
402.309 329.033 mo
402.214 329.197 402.043 329.289 401.865 329.289 cv
401.609 329.22 li
398.388 327.361 li
363.65 307.303 li
361.941 306.318 li
362.963 305.724 li
364.673 306.708 li
399.372 326.746 li
402.122 328.331 li
402.367 328.472 402.45 328.786 402.309 329.033 cv
cp
f
343.582 362.906 mo
343.487 363.069 343.312 363.162 343.138 363.162 cv
342.882 363.093 li
339.706 361.261 li
312.777 345.713 li
311.751 345.121 li
305.142 341.302 li
303.436 340.318 li
304.459 339.726 li
306.164 340.711 li
312.777 344.526 li
313.802 345.121 li
340.636 360.611 li
343.394 362.204 li
343.637 362.348 343.723 362.659 343.582 362.906 cv
cp
f
292.609 392.621 mo
292.517 392.785 292.342 392.877 292.165 392.877 cv
291.908 392.809 li
288.958 391.107 li
288.954 391.107 li
254.087 370.974 li
252.384 369.989 li
253.407 369.394 li
255.109 370.378 li
290.055 390.553 li
292.421 391.92 li
292.667 392.064 292.753 392.378 292.609 392.621 cv
cp
f
330.215 335.644 mo
313.802 345.121 li
312.777 345.713 li
308.264 348.318 li
307.242 348.909 li
286.664 360.789 li
283.591 362.563 li
283.078 361.674 li
285.816 360.095 li
306.226 348.311 li
307.248 347.72 li
311.751 345.121 li
312.777 344.526 li
328.164 335.644 li
321.501 331.798 li
319.795 330.811 li
320.817 330.219 li
322.523 331.203 li
330.215 335.644 li
cp
f
282.785 405.682 mo
284.312 406.564 284.312 407.993 282.785 408.874 cv
281.258 409.755 278.783 409.755 277.256 408.874 cv
275.73 407.993 275.73 406.564 277.256 405.682 cv
278.783 404.801 281.258 404.801 282.785 405.682 cv
cp
f
294.791 390.905 mo
296.318 391.787 296.318 393.215 294.791 394.098 cv
293.264 394.979 290.789 394.979 289.263 394.098 cv
287.736 393.215 287.736 391.787 289.263 390.905 cv
290.789 390.024 293.264 390.024 294.791 390.905 cv
cp
f
285.863 360.12 mo
287.39 361.001 287.39 362.431 285.863 363.312 cv
284.337 364.193 281.862 364.193 280.335 363.312 cv
278.808 362.431 278.808 361.001 280.335 360.12 cv
281.862 359.238 284.337 359.238 285.863 360.12 cv
cp
f
332.657 384.133 mo
334.184 385.014 334.184 386.443 332.657 387.325 cv
331.131 388.206 328.655 388.206 327.129 387.325 cv
325.602 386.443 325.602 385.014 327.129 384.133 cv
328.655 383.251 331.131 383.251 332.657 384.133 cv
cp
f
334.812 373.05 mo
336.339 373.931 336.339 375.36 334.812 376.241 cv
333.286 377.123 330.811 377.123 329.283 376.241 cv
327.757 375.36 327.757 373.931 329.283 373.05 cv
330.811 372.168 333.286 372.168 334.812 373.05 cv
cp
f
345.901 360.747 mo
347.429 361.629 347.429 363.058 345.901 363.939 cv
344.375 364.821 341.9 364.821 340.373 363.939 cv
338.847 363.058 338.847 361.629 340.373 360.747 cv
341.9 359.866 344.375 359.866 345.901 360.747 cv
cp
f
377.524 371.317 mo
379.051 372.198 379.051 373.627 377.524 374.509 cv
375.997 375.391 373.522 375.391 371.995 374.509 cv
370.469 373.627 370.469 372.198 371.995 371.317 cv
373.522 370.435 375.997 370.435 377.524 371.317 cv
cp
f
377.351 343.247 mo
378.878 344.128 378.878 345.557 377.351 346.439 cv
375.824 347.32 373.349 347.32 371.822 346.439 cv
370.296 345.557 370.296 344.128 371.822 343.247 cv
373.349 342.365 375.824 342.365 377.351 343.247 cv
cp
f
388.96 344.113 mo
390.487 344.994 390.487 346.424 388.96 347.305 cv
387.433 348.187 384.958 348.187 383.432 347.305 cv
381.905 346.424 381.905 344.994 383.432 344.113 cv
384.958 343.232 387.433 343.232 388.96 344.113 cv
cp
f
404.468 326.959 mo
405.995 327.84 405.995 329.27 404.468 330.151 cv
402.942 331.033 400.466 331.033 398.939 330.151 cv
397.413 329.27 397.413 327.84 398.939 326.959 cv
400.466 326.078 402.942 326.078 404.468 326.959 cv
cp
f
195.709 203.681 mo
195.709 203.863 195.616 204.031 195.459 204.126 cv
187.34 208.991 li
186.331 209.596 li
176.14 215.702 li
175.135 216.303 li
165.58 222.03 li
192.43 237.534 li
194.136 238.518 li
193.114 239.113 li
191.405 238.129 li
164.311 222.484 li
164.154 222.392 164.059 222.225 164.055 222.044 cv
164.055 221.862 164.147 221.691 164.304 221.599 cv
174.116 215.719 li
175.125 215.114 li
185.316 209.008 li
186.321 208.403 li
194.184 203.692 li
179.118 194.995 li
176.568 193.521 li
176.325 193.381 176.239 193.066 176.379 192.824 cv
176.523 192.577 176.834 192.492 177.08 192.635 cv
180.099 194.379 li
195.453 203.241 li
195.61 203.333 195.706 203.501 195.709 203.681 cv
cp
f
103.913 289.963 mo
77.5439 274.74 li
88.9527 268.152 li
89.1097 268.06 89.2087 267.892 89.2087 267.708 cv
89.2087 267.526 89.1097 267.356 88.9527 267.263 cv
73.4591 258.32 li
70.5802 256.658 li
70.334 256.515 70.0229 256.6 69.8795 256.847 cv
69.7391 257.089 69.821 257.403 70.0672 257.547 cv
72.262 258.816 li
87.6703 267.708 li
76.2619 274.296 li
76.1015 274.388 76.0054 274.555 76.0054 274.74 cv
76.0054 274.925 76.1015 275.092 76.2619 275.184 cv
102.891 290.558 li
103.913 289.963 li
cp
f
157.567 259.773 mo
156.547 260.364 li
154.838 259.379 li
136.497 248.788 li
136.339 248.699 136.24 248.529 136.24 248.347 cv
136.24 248.163 136.339 247.992 136.497 247.903 cv
145.146 242.908 li
123.981 230.454 li
121.974 229.271 li
121.728 229.127 121.646 228.813 121.789 228.57 cv
121.933 228.327 122.247 228.245 122.494 228.389 cv
125.051 229.896 li
146.425 242.471 li
146.582 242.563 146.681 242.73 146.678 242.915 cv
146.678 243.096 146.582 243.264 146.421 243.356 cv
137.778 248.347 li
155.86 258.784 li
157.567 259.773 li
cp
f
180.485 246.453 mo
179.463 247.045 li
177.757 246.06 li
149.228 229.589 li
149.071 229.496 148.971 229.329 148.971 229.144 cv
148.971 228.96 149.071 228.792 149.228 228.7 cv
161.822 221.428 li
145.819 212.188 li
142.435 210.232 li
142.189 210.092 142.103 209.777 142.247 209.534 cv
142.387 209.289 142.701 209.203 142.948 209.347 cv
146.811 211.576 li
163.104 220.984 li
163.265 221.076 163.361 221.244 163.361 221.428 cv
163.361 221.613 163.265 221.78 163.104 221.873 cv
150.51 229.144 li
178.779 245.465 li
180.485 246.453 li
cp
f
144.654 267.273 mo
143.631 267.868 li
141.926 266.884 li
123.3 256.132 li
109.981 263.82 li
109.824 263.913 109.629 263.913 109.468 263.82 cv
91.4483 253.417 li
89.2292 252.135 li
88.9834 251.995 88.901 251.68 89.0414 251.434 cv
89.1848 251.188 89.4959 251.106 89.7422 251.246 cv
92.3953 252.778 li
109.724 262.784 li
123.044 255.096 li
123.205 255.003 123.4 255.003 123.557 255.096 cv
142.948 266.289 li
144.654 267.273 li
cp
f
204.864 232.286 mo
203.842 232.881 li
202.132 231.893 li
175.135 216.303 li
174.116 215.719 li
165.754 210.885 li
165.751 210.885 li
163.58 209.634 li
163.334 209.49 163.248 209.179 163.392 208.933 cv
163.532 208.687 163.847 208.604 164.092 208.745 cv
166.893 210.362 li
175.125 215.114 li
176.14 215.702 li
203.158 231.298 li
204.864 232.286 li
cp
f
216.252 225.668 mo
215.23 226.263 li
213.521 225.278 li
186.331 209.596 li
185.316 209.008 li
153.867 190.868 li
152.236 189.928 li
151.991 189.788 151.908 189.473 152.049 189.23 cv
152.189 188.985 152.503 188.899 152.749 189.039 cv
155.139 190.417 li
186.321 208.403 li
187.34 208.991 li
214.543 224.683 li
216.252 225.668 li
cp
f
174.94 249.674 mo
173.918 250.269 li
172.212 249.284 li
136.172 228.478 li
136.168 228.478 li
133.758 227.083 li
133.512 226.939 133.426 226.624 133.57 226.382 cv
133.71 226.136 134.025 226.051 134.271 226.194 cv
137.293 227.938 li
173.234 248.689 li
174.94 249.674 li
cp
f
124.285 279.112 mo
123.263 279.707 li
121.557 278.723 li
105.465 269.431 li
101.609 267.205 li
101.366 267.065 101.28 266.75 101.424 266.504 cv
101.564 266.261 101.878 266.176 102.121 266.316 cv
106.542 268.866 li
122.579 278.128 li
124.285 279.112 li
cp
f
73.3874 255.174 mo
74.9142 256.055 74.9142 257.484 73.3874 258.365 cv
71.8607 259.247 69.3855 259.247 67.8588 258.365 cv
66.3321 257.484 66.3321 256.055 67.8588 255.174 cv
69.3855 254.292 71.8607 254.292 73.3874 255.174 cv
cp
f
106.179 265.916 mo
107.706 266.797 107.706 268.226 106.179 269.108 cv
104.653 269.989 102.177 269.989 100.651 269.108 cv
99.1244 268.226 99.1244 266.797 100.651 265.916 cv
102.177 265.034 104.653 265.034 106.179 265.916 cv
cp
f
91.7614 250.065 mo
93.2881 250.946 93.2881 252.376 91.7614 253.257 cv
90.2346 254.139 87.7595 254.139 86.2328 253.257 cv
84.706 252.376 84.706 250.946 86.2328 250.065 cv
87.7595 249.184 90.2346 249.184 91.7614 250.065 cv
cp
f
124.701 226.936 mo
126.227 227.817 126.227 229.246 124.701 230.127 cv
123.174 231.009 120.699 231.009 119.172 230.127 cv
117.645 229.246 117.645 227.817 119.172 226.936 cv
120.699 226.054 123.174 226.054 124.701 226.936 cv
cp
f
97.8196 242.482 mo
99.3458 243.363 99.3458 244.793 97.8196 245.674 cv
96.2928 246.555 93.8172 246.555 92.2909 245.674 cv
90.7637 244.793 90.7637 243.363 92.2909 242.482 cv
93.8172 241.601 96.2928 241.601 97.8196 242.482 cv
cp
f
151.403 263.352 mo
150.38 263.947 li
148.674 262.962 li
106.005 238.327 li
98.2682 242.792 li
95.3522 244.474 li
95.1094 244.618 94.7949 244.532 94.6515 244.286 cv
94.5111 244.043 94.5969 243.729 94.8392 243.585 cv
97.2359 242.2 li
105.749 237.288 li
105.906 237.199 106.101 237.199 106.261 237.288 cv
149.696 262.367 li
151.403 263.352 li
cp
f
222.703 221.917 mo
221.681 222.512 li
219.971 221.527 li
201.428 210.82 li
201.268 210.728 201.172 210.56 201.172 210.375 cv
201.172 210.191 201.268 210.023 201.428 209.931 cv
210.078 204.936 li
188.913 192.482 li
186.902 191.302 li
186.66 191.159 186.577 190.844 186.721 190.602 cv
186.865 190.355 187.179 190.273 187.422 190.417 cv
189.982 191.921 li
211.356 204.499 li
211.514 204.591 211.609 204.762 211.609 204.943 cv
211.606 205.128 211.51 205.295 211.353 205.388 cv
202.711 210.375 li
220.997 220.932 li
222.703 221.917 li
cp
f
189.63 188.966 mo
191.157 189.847 191.157 191.276 189.63 192.158 cv
188.103 193.039 185.628 193.039 184.101 192.158 cv
182.575 191.276 182.575 189.847 184.101 188.966 cv
185.628 188.084 188.103 188.084 189.63 188.966 cv
cp
f
137.042 224.908 mo
138.569 225.789 138.569 227.218 137.042 228.1 cv
135.516 228.981 133.041 228.981 131.514 228.1 cv
129.987 227.218 129.987 225.789 131.514 224.908 cv
133.041 224.026 135.516 224.026 137.042 224.908 cv
cp
f
146.272 208.775 mo
147.798 209.656 147.798 211.085 146.272 211.967 cv
144.745 212.848 142.27 212.848 140.743 211.967 cv
139.216 211.085 139.216 209.656 140.743 208.775 cv
142.27 207.894 144.745 207.894 146.272 208.775 cv
cp
f
155.264 187.16 mo
156.791 188.042 156.791 189.471 155.264 190.352 cv
153.738 191.234 151.262 191.234 149.736 190.352 cv
148.209 189.471 148.209 188.042 149.736 187.16 cv
151.262 186.279 153.738 186.279 155.264 187.16 cv
cp
f
179.541 191.594 mo
181.068 192.475 181.068 193.904 179.541 194.785 cv
178.014 195.667 175.539 195.667 174.012 194.785 cv
172.486 193.904 172.486 192.475 174.012 191.594 cv
175.539 190.712 178.014 190.712 179.541 191.594 cv
cp
f
166.7 207.29 mo
168.227 208.172 168.227 209.601 166.7 210.482 cv
165.174 211.363 162.698 211.363 161.172 210.482 cv
159.645 209.601 159.645 208.172 161.172 207.29 cv
162.698 206.409 165.174 206.409 166.7 207.29 cv
cp
f
368.334 262.483 mo
368.331 262.665 368.235 262.833 368.078 262.925 cv
342.598 277.636 li
340.892 278.62 li
339.866 278.029 li
341.572 277.041 li
366.809 262.47 li
343.647 248.594 li
342.642 247.988 li
336.93 244.566 li
336.772 244.474 336.677 244.303 336.68 244.122 cv
336.68 243.941 336.779 243.773 336.937 243.681 cv
352.286 234.819 li
355.309 233.076 li
355.551 232.932 355.866 233.018 356.006 233.264 cv
356.15 233.51 356.064 233.821 355.822 233.965 cv
353.275 235.435 li
338.205 244.135 li
343.657 247.404 li
344.666 248.005 li
368.084 262.039 li
368.238 262.135 368.334 262.302 368.334 262.483 cv
cp
f
343.921 230.163 mo
341.914 231.343 li
320.749 243.797 li
329.398 248.792 li
329.556 248.884 329.655 249.052 329.655 249.236 cv
329.655 249.421 329.556 249.588 329.398 249.681 cv
311.788 259.848 li
310.082 260.832 li
309.057 260.241 li
310.763 259.256 li
328.116 249.236 li
319.474 244.248 li
319.317 244.156 319.217 243.988 319.217 243.804 cv
319.217 243.623 319.313 243.452 319.47 243.359 cv
340.844 230.782 li
343.401 229.278 li
343.647 229.134 343.962 229.216 344.106 229.462 cv
344.249 229.705 344.167 230.02 343.921 230.163 cv
cp
f
322.055 207.941 mo
318.766 209.842 li
302.243 219.38 li
315.118 226.813 li
315.279 226.905 315.375 227.076 315.375 227.257 cv
315.375 227.442 315.279 227.609 315.118 227.702 cv
285.614 244.734 li
283.909 245.722 li
282.883 245.13 li
284.589 244.146 li
313.836 227.257 li
300.961 219.825 li
300.804 219.732 300.705 219.565 300.705 219.38 cv
300.705 219.196 300.804 219.028 300.961 218.936 cv
317.867 209.175 li
321.542 207.053 li
321.788 206.912 322.103 206.994 322.243 207.241 cv
322.386 207.487 322.301 207.798 322.055 207.941 cv
cp
f
395.879 272.61 mo
393.68 273.878 li
378.809 282.463 li
378.652 282.555 378.457 282.555 378.296 282.463 cv
367.107 276.001 li
353.439 283.892 li
351.729 284.88 li
350.704 284.285 li
352.413 283.3 li
366.851 274.965 li
367.008 274.873 367.206 274.873 367.363 274.965 cv
378.552 281.427 li
392.555 273.345 li
395.366 271.721 li
395.612 271.581 395.923 271.663 396.067 271.909 cv
396.207 272.155 396.125 272.466 395.879 272.61 cv
cp
f
301.279 210.697 mo
299.108 211.948 li
299.105 211.948 li
263.971 232.238 li
262.261 233.223 li
261.236 232.631 li
262.941 231.647 li
297.967 211.425 li
300.767 209.808 li
301.013 209.665 301.327 209.75 301.467 209.996 cv
301.611 210.242 301.525 210.553 301.279 210.697 cv
cp
f
313.659 190.82 mo
312.031 191.761 li
252.915 225.855 li
251.205 226.84 li
250.179 226.248 li
251.886 225.264 li
310.756 191.31 li
313.146 189.932 li
313.391 189.791 313.706 189.874 313.846 190.119 cv
313.99 190.366 313.904 190.68 313.659 190.82 cv
cp
f
332.137 227.972 mo
329.719 229.366 li
294.36 249.783 li
292.65 250.768 li
291.625 250.176 li
293.33 249.192 li
328.598 228.83 li
331.624 227.083 li
331.87 226.942 332.185 227.025 332.325 227.271 cv
332.468 227.517 332.383 227.831 332.137 227.972 cv
cp
f
293.819 227.51 mo
289.963 229.735 li
274.797 238.491 li
273.092 239.476 li
272.066 238.884 li
273.772 237.9 li
288.893 229.172 li
293.306 226.621 li
293.553 226.481 293.867 226.563 294.008 226.809 cv
294.148 227.055 294.066 227.367 293.819 227.51 cv
cp
f
289.25 226.22 mo
287.724 227.101 287.724 228.53 289.25 229.412 cv
290.777 230.293 293.252 230.293 294.779 229.412 cv
296.306 228.53 296.306 227.101 294.779 226.22 cv
293.252 225.338 290.777 225.338 289.25 226.22 cv
cp
f
392.787 270.299 mo
391.26 271.181 391.26 272.61 392.787 273.491 cv
394.313 274.373 396.788 274.373 398.315 273.491 cv
399.841 272.61 399.841 271.181 398.315 270.299 cv
396.788 269.418 394.313 269.418 392.787 270.299 cv
cp
f
341.195 227.826 mo
339.668 228.708 339.668 230.137 341.195 231.018 cv
342.722 231.9 345.197 231.9 346.724 231.018 cv
348.25 230.137 348.25 228.708 346.724 227.826 cv
345.197 226.944 342.722 226.944 341.195 227.826 cv
cp
f
368.076 243.373 mo
366.549 244.254 366.549 245.683 368.076 246.565 cv
369.603 247.446 372.078 247.446 373.605 246.565 cv
375.131 245.683 375.131 244.254 373.605 243.373 cv
372.078 242.491 369.603 242.491 368.076 243.373 cv
cp
f
371.244 245.178 mo
371.1 245.424 370.789 245.506 370.543 245.366 cv
367.63 243.684 li
359.89 239.216 li
344.666 248.005 li
343.647 248.594 li
317.973 263.417 li
316.264 264.402 li
315.241 263.81 li
316.947 262.826 li
342.642 247.988 li
343.657 247.404 li
359.633 238.18 li
359.794 238.088 359.989 238.088 360.146 238.18 cv
368.659 243.096 li
371.055 244.478 li
371.298 244.618 371.383 244.932 371.244 245.178 cv
cp
f
278.992 192.195 mo
276.989 193.374 li
255.817 205.828 li
264.466 210.823 li
264.627 210.916 264.723 211.083 264.723 211.268 cv
264.723 211.449 264.627 211.62 264.466 211.712 cv
246.439 222.119 li
244.733 223.103 li
238.306 226.813 li
238.053 226.884 li
237.875 226.884 237.701 226.792 237.609 226.628 cv
237.465 226.382 237.551 226.067 237.793 225.927 cv
243.708 222.512 li
245.417 221.527 li
263.184 211.268 li
254.542 206.277 li
254.384 206.184 254.289 206.017 254.285 205.835 cv
254.285 205.651 254.381 205.483 254.538 205.391 cv
275.912 192.813 li
278.473 191.31 li
278.715 191.166 279.03 191.248 279.174 191.491 cv
279.317 191.737 279.239 192.051 278.992 192.195 cv
cp
f
276.266 189.856 mo
274.738 190.738 274.738 192.166 276.266 193.048 cv
277.792 193.93 280.267 193.93 281.794 193.048 cv
283.32 192.166 283.32 190.738 281.794 189.856 cv
280.267 188.975 277.792 188.975 276.266 189.856 cv
cp
f
328.853 225.798 mo
327.326 226.68 327.326 228.109 328.853 228.99 cv
330.38 229.872 332.855 229.872 334.382 228.99 cv
335.908 228.109 335.908 226.68 334.382 225.798 cv
332.855 224.917 330.38 224.917 328.853 225.798 cv
cp
f
318.588 206.557 mo
317.061 207.439 317.061 208.867 318.588 209.749 cv
320.114 210.63 322.589 210.63 324.116 209.749 cv
325.642 208.867 325.642 207.439 324.116 206.557 cv
322.589 205.675 320.114 205.675 318.588 206.557 cv
cp
f
310.631 188.051 mo
309.104 188.932 309.104 190.361 310.631 191.243 cv
312.158 192.124 314.633 192.124 316.16 191.243 cv
317.686 190.361 317.686 188.932 316.16 188.051 cv
314.633 187.17 312.158 187.17 310.631 188.051 cv
cp
f
352.847 232.035 mo
351.32 232.916 351.32 234.345 352.847 235.227 cv
354.374 236.108 356.849 236.108 358.376 235.227 cv
359.902 234.345 359.902 232.916 358.376 232.035 cv
356.849 231.153 354.374 231.153 352.847 232.035 cv
cp
f
298.159 208.353 mo
296.632 209.235 296.632 210.664 298.159 211.545 cv
299.685 212.427 302.161 212.427 303.687 211.545 cv
305.214 210.664 305.214 209.235 303.687 208.353 cv
302.161 207.472 299.685 207.472 298.159 208.353 cv
cp
f
180.662 225.701 mo
172.171 220.767 li
171.237 220.224 170.549 219.157 170.283 217.467 cv
178.774 222.401 li
179.04 224.092 179.727 225.158 180.662 225.701 cv
cp
.854902 .85098 .909804 rgb
f
gsave
180.662 225.701 mo
172.171 220.767 li
171.237 220.224 170.549 219.157 170.283 217.467 cv
178.774 222.401 li
179.04 224.092 179.727 225.158 180.662 225.701 cv
clp
180.662 225.701 mo
172.171 220.767 li
171.243 220.227 170.558 219.171 170.288 217.498 cv
178.778 222.432 li
179.048 224.104 179.733 225.161 180.662 225.701 cv
cp
f
178.778 222.432 mo
170.288 217.498 li
170.283 217.467 li
178.774 222.401 li
178.778 222.432 li
cp
f
grestore
187.966 137.123 mo
196.457 142.058 li
193.979 140.618 190.545 140.798 186.699 143.018 cv
178.209 138.084 li
182.054 135.863 185.489 135.684 187.966 137.123 cv
cp
f
gsave
187.966 137.124 mo
196.457 142.058 li
193.979 140.618 190.545 140.798 186.699 143.018 cv
178.209 138.084 li
182.054 135.863 185.489 135.684 187.966 137.124 cv
clp
186.699 143.018 mo
178.209 138.084 li
182.054 135.863 185.489 135.684 187.966 137.123 cv
196.457 142.058 li
193.979 140.618 190.545 140.798 186.699 143.018 cv
cp
f
grestore
178.774 222.401 mo
170.283 217.467 li
162.124 165.708 li
170.615 170.642 li
178.774 222.401 li
cp
f
184.111 144.512 mo
175.621 139.578 li
178.209 138.084 li
186.699 143.018 li
184.111 144.512 li
cp
.921569 .921569 .945098 rgb
f
170.615 170.642 mo
162.124 165.708 li
160.736 156.9 167.16 144.463 175.621 139.578 cv
184.111 144.512 li
175.65 149.397 169.226 161.835 170.615 170.642 cv
cp
f
gsave
170.615 170.642 mo
162.124 165.708 li
160.736 156.9 167.16 144.463 175.621 139.578 cv
184.111 144.512 li
175.65 149.397 169.226 161.835 170.615 170.642 cv
clp
170.615 170.642 mo
162.124 165.708 li
161.702 163.03 162.002 160.017 162.862 156.982 cv
171.352 161.916 li
170.492 164.95 170.192 167.964 170.615 170.642 cv
cp
f
171.352 161.916 mo
162.862 156.982 li
163.83 153.566 165.506 150.125 167.661 147.104 cv
176.151 152.038 li
173.997 155.059 172.32 158.501 171.352 161.916 cv
cp
f
176.151 152.038 mo
167.661 147.104 li
169.308 144.795 171.234 142.732 173.335 141.115 cv
181.826 146.048 li
179.724 147.666 177.798 149.729 176.151 152.038 cv
cp
f
181.826 146.048 mo
173.335 141.115 li
174.076 140.544 174.84 140.029 175.621 139.578 cv
184.111 144.512 li
183.33 144.963 182.567 145.478 181.826 146.048 cv
cp
f
grestore
186.699 143.018 mo
195.16 138.133 201.63 143.126 200.296 153.506 cv
192.46 214.499 li
191.84 219.321 188.741 223.342 185.636 225.135 cv
182.53 226.928 179.419 226.493 178.774 222.401 cv
170.615 170.642 li
169.226 161.835 175.65 149.397 184.111 144.512 cv
186.699 143.018 li
cp
.768627 .764706 .92549 rgb
f
196.092 143.457 mo
202.005 146.894 li
199.495 145.435 196.019 145.64 192.182 147.855 cv
186.268 144.419 li
190.105 142.203 193.581 141.999 196.092 143.457 cv
cp
.0196078 .831373 .960784 rgb
f
gsave
196.092 143.457 mo
202.005 146.894 li
199.495 145.435 196.019 145.64 192.182 147.855 cv
186.268 144.419 li
190.105 142.203 193.581 141.999 196.092 143.457 cv
clp
192.182 147.855 mo
186.268 144.419 li
190.105 142.203 193.581 141.999 196.092 143.457 cv
202.005 146.894 li
199.495 145.435 196.019 145.64 192.182 147.855 cv
cp
f
grestore
193.552 153.632 mo
198.776 150.613 203.036 153.043 203.05 159.049 cv
203.07 165.051 198.839 172.379 193.614 175.393 cv
188.389 178.413 184.127 175.987 184.112 169.983 cv
184.092 163.982 188.328 156.645 193.552 153.632 cv
cp
f
182.442 180.556 mo
176.529 177.119 li
174.05 175.679 172.514 172.617 172.501 168.264 cv
172.476 159.5 178.641 148.822 186.268 144.419 cv
192.182 147.855 li
184.555 152.259 178.39 162.937 178.415 171.701 cv
178.427 176.053 179.964 179.116 182.442 180.556 cv
cp
f
gsave
182.442 180.556 mo
176.529 177.119 li
174.05 175.679 172.514 172.617 172.501 168.264 cv
172.476 159.5 178.641 148.822 186.268 144.419 cv
192.182 147.855 li
184.555 152.259 178.39 162.937 178.415 171.701 cv
178.427 176.053 179.964 179.116 182.442 180.556 cv
clp
182.442 180.556 mo
176.529 177.119 li
174.328 175.84 172.869 173.282 172.562 169.677 cv
178.476 173.114 li
178.783 176.719 180.241 179.277 182.442 180.556 cv
cp
f
178.476 173.114 mo
172.562 169.677 li
172.523 169.222 172.502 168.751 172.501 168.264 cv
172.48 160.708 177.06 151.728 183.211 146.575 cv
189.125 150.012 li
182.973 155.165 178.393 164.144 178.415 171.701 cv
178.416 172.188 178.437 172.659 178.476 173.114 cv
cp
f
189.125 150.012 mo
183.211 146.575 li
184.194 145.751 185.217 145.026 186.268 144.419 cv
192.182 147.855 li
191.131 148.462 190.108 149.188 189.125 150.012 cv
cp
f
grestore
193.552 153.632 mo
192.182 147.855 li
199.808 143.452 206.01 146.99 206.035 155.754 cv
206.06 164.518 199.899 175.19 192.272 179.593 cv
184.645 183.996 178.44 180.465 178.415 171.701 cv
178.39 162.937 184.555 152.259 192.182 147.855 cv
193.552 153.632 li
188.328 156.645 184.092 163.982 184.112 169.983 cv
184.127 175.987 188.389 178.413 193.614 175.393 cv
198.839 172.379 203.07 165.051 203.05 159.049 cv
203.036 153.043 198.776 150.613 193.552 153.632 cv
cp
f
gsave
193.552 153.632 mo
192.182 147.855 li
199.808 143.452 206.01 146.99 206.035 155.754 cv
206.06 164.518 199.899 175.19 192.272 179.593 cv
184.645 183.996 178.44 180.465 178.415 171.701 cv
178.39 162.937 184.555 152.259 192.182 147.855 cv
193.552 153.632 li
188.328 156.645 184.093 163.981 184.112 169.983 cv
184.127 175.987 188.389 178.413 193.614 175.393 cv
198.839 172.379 203.07 165.051 203.05 159.049 cv
203.036 153.043 198.776 150.613 193.552 153.632 cv
clp
193.552 153.632 mo
192.182 147.855 li
199.808 143.452 206.01 146.99 206.035 155.754 cv
206.06 164.518 199.899 175.19 192.272 179.593 cv
184.645 183.996 178.44 180.465 178.415 171.701 cv
178.39 162.937 184.555 152.259 192.182 147.855 cv
193.552 153.632 li
188.328 156.645 184.092 163.982 184.112 169.983 cv
184.127 175.987 188.389 178.413 193.614 175.393 cv
198.839 172.379 203.07 165.051 203.05 159.049 cv
203.036 153.043 198.776 150.613 193.552 153.632 cv
cp
.0705882 .690196 .952941 rgb
f
grestore
191.316 98.6274 mo
175.99 48.5865 li
191.316 98.6274 li
cp
.0745098 .576471 .94902 rgb
f
189.876 99.0682 mo
174.55 49.0273 li
177.43 48.1457 li
192.756 98.1866 li
189.876 99.0682 li
cp
.0901961 .109804 .160784 rgb
f
209.573 255.763 mo
195.51 247.076 192.347 235.413 190.997 230.432 cv
192.09 235.21 195.829 239.962 202.209 243.802 cv
218.149 253.396 244.54 253.663 261.154 244.399 cv
268.289 240.42 272.461 235.331 273.636 230.059 cv
272.555 234.192 270.923 240.439 264.692 247.658 cv
262.332 250.392 257.133 255.477 248.822 258.811 cv
236.185 263.882 220.779 262.685 209.573 255.763 cv
cp
.568627 .615686 .839216 rgb
f
261.423 141.817 mo
276.962 151.17 276.429 166.072 260.233 175.104 cv
244.036 184.135 218.309 183.875 202.77 174.522 cv
187.231 165.17 187.764 150.267 203.961 141.236 cv
220.157 132.205 245.884 132.465 261.423 141.817 cv
cp
.894118 .890196 .933333 rgb
f
190.965 230.297 mo
178.434 175.544 li
179.895 181.928 184.753 188.103 193.044 193.092 cv
213.756 205.558 248.049 205.905 269.637 193.867 cv
278.909 188.697 284.33 182.084 285.857 175.233 cv
273.636 230.058 li
272.461 235.33 268.289 240.42 261.154 244.399 cv
244.54 253.663 218.149 253.396 202.209 243.802 cv
195.829 239.962 192.09 235.21 190.965 230.297 cv
cp
.717647 .713726 .890196 rgb
f
197.299 140.363 mo
218.46 128.876 248.422 129.217 268.543 141.173 cv
266.748 140.093 264.239 140.177 261.423 141.748 cv
245.884 132.396 220.157 132.135 203.961 141.166 cv
187.764 150.198 187.231 165.101 202.77 174.453 cv
218.309 183.805 244.036 184.065 260.233 175.034 cv
276.429 166.003 276.962 151.1 261.423 141.748 cv
264.239 140.177 266.748 140.093 268.543 141.173 cv
272.756 143.897 279.124 148.014 283.553 156.676 cv
287.686 164.758 286.43 172.007 285.894 175.102 cv
284.32 182.133 278.901 188.739 269.637 193.904 cv
248.049 205.942 213.756 205.595 193.044 193.129 cv
184.762 188.144 179.904 181.977 178.438 175.599 cv
177.92 172.815 177.431 170.185 177.927 166.067 cv
178.548 160.902 180.607 157.009 180.694 156.846 cv
182.236 153.966 186.331 146.317 197.299 140.363 cv
cp
.854902 .85098 .909804 rgb
f
254.65 74.2352 mo
266.569 81.4091 266.16 92.8403 253.737 99.7675 cv
241.313 106.695 221.58 106.495 209.66 99.3218 cv
197.741 92.1479 198.15 80.7172 210.574 73.7896 cv
222.997 66.8619 242.731 67.0619 254.65 74.2352 cv
cp
.921569 .921569 .945098 rgb
f
193.915 159.769 mo
174.73 147.896 170.518 132.185 170.363 121.096 cv
170.388 130.002 176.108 138.905 187.593 145.817 cv
211.256 160.059 250.434 160.456 275.098 146.703 cv
287.791 139.624 294.167 130.178 294.14 120.735 cv
293.926 126.533 293.607 129.54 291.276 136.033 cv
289.448 141.124 286.183 145.455 284.429 147.782 cv
283.61 148.868 276 158.565 261.306 164.288 cv
235.829 174.21 209.102 169.168 193.915 159.769 cv
cp
.717647 .713726 .890196 rgb
f
195.685 71.9995 mo
206.92 65.8833 219.535 62.8708 233.18 63.0453 cv
247.192 63.2243 259.77 66.5591 270.563 72.9567 cv
266.522 70.525 260.882 70.76 254.65 74.2352 cv
242.731 67.0619 222.997 66.8619 210.574 73.7896 cv
198.15 80.7172 197.741 92.1479 209.66 99.3218 cv
221.58 106.495 241.313 106.695 253.737 99.7675 cv
266.16 92.8403 266.569 81.4091 254.65 74.2352 cv
260.882 70.76 266.522 70.525 270.563 72.9567 cv
276.251 76.6295 293.562 87.8047 294.114 111.63 cv
294.141 121.074 287.766 130.52 275.072 137.598 cv
250.408 151.351 211.23 150.954 187.567 136.713 cv
176.082 129.8 170.363 120.897 170.337 111.991 cv
170.465 108.529 170.61 104.605 172.124 99.8094 cv
173.918 94.1296 175.463 91.6915 178.023 87.6531 cv
180.044 84.4641 186.337 77.0883 195.685 71.9995 cv
cp
.894118 .890196 .933333 rgb
f
244.4 146.94 mo
224.359 149.295 202.764 145.859 187.567 136.713 cv
176.147 129.839 170.427 120.997 170.338 112.142 cv
170.322 106.39 172.687 101.08 176.675 96.832 cv
176.755 104.774 181.885 112.705 192.127 118.87 cv
205.758 127.073 225.127 130.155 243.101 128.043 cv
243.9 134.54 244.383 141.188 244.4 146.94 cv
cp
.0156863 .184314 .560784 rgb
f
170.363 121.096 mo
170.337 111.991 li
170.363 120.897 176.082 129.8 187.567 136.713 cv
211.23 150.954 250.408 151.351 275.072 137.598 cv
287.766 130.52 294.141 121.074 294.114 111.63 cv
294.14 120.735 li
294.167 130.178 287.791 139.624 275.098 146.703 cv
250.434 160.456 211.256 160.059 187.593 145.817 cv
176.108 138.905 170.388 130.002 170.363 121.096 cv
cp
.854902 .85098 .909804 rgb
f
180.394 121.36 mo
179.177 124.798 177.093 125.028 175.65 121.884 cv
173.24 116.634 175.695 110.291 178.821 111.196 cv
179.39 111.361 179.688 111.688 180.005 112.034 cv
182.009 114.882 180.93 119.846 180.394 121.36 cv
cp
.0196078 .831373 .960784 rgb
f
215.474 136.924 mo
214.559 142.086 208.073 142.955 204.797 138.354 cv
201.376 133.55 205.125 128.016 209.913 128.611 cv
210.089 128.633 210.322 128.684 210.497 128.715 cv
214.716 129.938 215.948 134.251 215.474 136.924 cv
cp
f
273.273 114.726 mo
273.273 111.67 271.127 110.431 268.48 111.959 cv
265.833 113.488 263.688 117.204 263.688 120.26 cv
263.688 123.316 265.834 124.555 268.481 123.027 cv
271.127 121.499 273.273 117.783 273.273 114.726 cv
cp
.0745098 .576471 .94902 rgb
f
269.104 117.56 mo
304.039 91.3409 li
269.104 117.56 li
cp
f
269.105 119.065 mo
268.648 119.065 268.196 118.858 267.9 118.464 cv
267.401 117.799 267.535 116.855 268.2 116.355 cv
303.135 90.1365 li
303.799 89.6377 304.744 89.7713 305.243 90.4374 cv
305.742 91.102 305.608 92.046 304.942 92.5453 cv
270.008 118.764 li
269.737 118.967 269.42 119.065 269.105 119.065 cv
cp
.0901961 .109804 .160784 rgb
f
312.907 89.4601 mo
312.907 84.975 309.271 81.3389 304.785 81.3389 cv
300.3 81.3389 296.664 84.975 296.664 89.4601 cv
296.664 93.9458 300.3 97.582 304.785 97.582 cv
309.271 97.582 312.907 93.9458 312.907 89.4601 cv
cp
.0745098 .576471 .94902 rgb
f
183.373 48.5865 mo
183.373 44.1009 179.737 40.4647 175.251 40.4647 cv
170.766 40.4647 167.13 44.1009 167.13 48.5865 cv
167.13 53.0721 170.766 56.7083 175.251 56.7083 cv
179.737 56.7083 183.373 53.0721 183.373 48.5865 cv
cp
f
280.46 172.615 mo
286.373 176.052 li
283.863 174.593 280.387 174.798 276.55 177.013 cv
270.636 173.576 li
274.473 171.361 277.949 171.156 280.46 172.615 cv
cp
.0196078 .831373 .960784 rgb
f
gsave
280.46 172.615 mo
286.373 176.052 li
283.863 174.593 280.387 174.798 276.55 177.013 cv
270.636 173.576 li
274.473 171.361 277.949 171.156 280.46 172.615 cv
clp
276.55 177.013 mo
270.636 173.576 li
274.473 171.361 277.949 171.156 280.46 172.615 cv
286.373 176.052 li
283.863 174.593 280.387 174.798 276.55 177.013 cv
cp
f
grestore
277.92 182.79 mo
283.144 179.771 287.404 182.201 287.418 188.207 cv
287.437 194.208 283.207 201.537 277.982 204.55 cv
272.757 207.57 268.494 205.144 268.481 199.14 cv
268.46 193.139 272.696 185.802 277.92 182.79 cv
cp
f
266.811 209.713 mo
260.897 206.277 li
258.418 204.837 256.882 201.774 256.869 197.422 cv
256.844 188.658 263.009 177.98 270.636 173.576 cv
276.55 177.013 li
268.923 181.416 262.758 192.095 262.783 200.859 cv
262.795 205.211 264.332 208.273 266.811 209.713 cv
cp
f
gsave
266.811 209.713 mo
260.897 206.277 li
258.418 204.837 256.882 201.774 256.869 197.422 cv
256.844 188.658 263.009 177.979 270.636 173.576 cv
276.55 177.013 li
268.923 181.416 262.758 192.095 262.783 200.859 cv
262.795 205.211 264.332 208.273 266.811 209.713 cv
clp
266.811 209.713 mo
260.897 206.277 li
258.696 204.998 257.237 202.44 256.93 198.835 cv
262.843 202.271 li
263.151 205.876 264.61 208.434 266.811 209.713 cv
cp
f
262.843 202.271 mo
256.93 198.835 li
256.891 198.38 256.871 197.909 256.869 197.422 cv
256.848 189.865 261.428 180.886 267.58 175.732 cv
273.493 179.169 li
267.342 184.323 262.762 193.302 262.783 200.859 cv
262.784 201.346 262.805 201.817 262.843 202.271 cv
cp
f
273.493 179.169 mo
267.58 175.732 li
268.562 174.909 269.585 174.183 270.636 173.576 cv
276.55 177.013 li
275.499 177.62 274.476 178.345 273.493 179.169 cv
cp
f
grestore
277.92 182.79 mo
276.55 177.013 li
284.177 172.61 290.378 176.148 290.403 184.912 cv
290.428 193.676 284.266 204.347 276.64 208.751 cv
269.013 213.154 262.808 209.622 262.783 200.859 cv
262.758 192.095 268.923 181.416 276.55 177.013 cv
277.92 182.79 li
272.696 185.802 268.46 193.139 268.481 199.14 cv
268.494 205.144 272.757 207.57 277.982 204.55 cv
283.207 201.537 287.437 194.208 287.418 188.207 cv
287.404 182.201 283.144 179.771 277.92 182.79 cv
cp
f
gsave
277.92 182.79 mo
276.55 177.013 li
284.177 172.61 290.378 176.148 290.403 184.912 cv
290.428 193.676 284.267 204.347 276.64 208.751 cv
269.013 213.154 262.808 209.622 262.783 200.859 cv
262.758 192.095 268.923 181.416 276.55 177.013 cv
277.92 182.79 li
272.696 185.802 268.46 193.139 268.481 199.14 cv
268.494 205.144 272.757 207.57 277.982 204.55 cv
283.207 201.537 287.437 194.208 287.418 188.207 cv
287.404 182.201 283.144 179.771 277.92 182.79 cv
clp
277.92 182.79 mo
276.55 177.013 li
284.177 172.61 290.378 176.148 290.403 184.912 cv
290.428 193.676 284.266 204.347 276.64 208.751 cv
269.013 213.154 262.808 209.622 262.783 200.859 cv
262.758 192.095 268.923 181.416 276.55 177.013 cv
277.92 182.79 li
272.696 185.802 268.46 193.139 268.481 199.14 cv
268.494 205.144 272.757 207.57 277.982 204.55 cv
283.207 201.537 287.437 194.208 287.418 188.207 cv
287.404 182.201 283.144 179.771 277.92 182.79 cv
cp
.0705882 .690196 .952941 rgb
f
grestore
280.528 263.851 mo
272.038 258.917 li
271.104 258.374 270.416 257.308 270.149 255.617 cv
278.64 260.552 li
278.907 262.242 279.594 263.308 280.528 263.851 cv
cp
.854902 .85098 .909804 rgb
f
gsave
280.528 263.851 mo
272.038 258.917 li
271.104 258.374 270.416 257.308 270.149 255.617 cv
278.64 260.552 li
278.906 262.242 279.594 263.308 280.528 263.851 cv
clp
280.528 263.851 mo
272.038 258.917 li
271.11 258.377 270.424 257.321 270.155 255.648 cv
278.645 260.582 li
278.915 262.255 279.6 263.311 280.528 263.851 cv
cp
f
278.645 260.582 mo
270.155 255.648 li
270.149 255.617 li
278.64 260.552 li
278.645 260.582 li
cp
f
grestore
287.832 175.274 mo
296.323 180.208 li
293.846 178.769 290.411 178.948 286.566 181.168 cv
278.075 176.234 li
281.921 174.014 285.355 173.834 287.832 175.274 cv
cp
f
gsave
287.832 175.274 mo
296.323 180.208 li
293.846 178.769 290.411 178.948 286.566 181.168 cv
278.075 176.234 li
281.921 174.014 285.355 173.834 287.832 175.274 cv
clp
286.566 181.168 mo
278.075 176.234 li
281.921 174.014 285.355 173.834 287.832 175.274 cv
296.323 180.208 li
293.846 178.769 290.411 178.948 286.566 181.168 cv
cp
f
grestore
278.64 260.552 mo
270.149 255.617 li
261.991 203.858 li
270.481 208.792 li
278.64 260.552 li
cp
f
283.978 182.662 mo
275.487 177.728 li
278.075 176.234 li
286.566 181.168 li
283.978 182.662 li
cp
.921569 .921569 .945098 rgb
f
270.481 208.792 mo
261.991 203.858 li
260.602 195.051 267.027 182.613 275.487 177.728 cv
283.978 182.662 li
275.517 187.547 269.093 199.985 270.481 208.792 cv
cp
f
gsave
270.481 208.792 mo
261.991 203.858 li
260.602 195.051 267.027 182.613 275.487 177.728 cv
283.978 182.662 li
275.517 187.547 269.093 199.985 270.481 208.792 cv
clp
270.481 208.792 mo
261.991 203.858 li
261.569 201.18 261.869 198.167 262.729 195.132 cv
271.219 200.066 li
270.359 203.101 270.059 206.114 270.481 208.792 cv
cp
f
271.219 200.066 mo
262.729 195.132 li
263.696 191.717 265.373 188.275 267.527 185.254 cv
276.018 190.188 li
273.864 193.209 272.187 196.651 271.219 200.066 cv
cp
f
276.018 190.188 mo
267.527 185.254 li
269.174 182.945 271.1 180.882 273.201 179.264 cv
281.692 184.199 li
279.591 185.816 277.665 187.879 276.018 190.188 cv
cp
f
281.692 184.199 mo
273.201 179.264 li
273.943 178.694 274.707 178.179 275.487 177.728 cv
283.978 182.662 li
283.197 183.113 282.434 183.628 281.692 184.199 cv
cp
f
grestore
286.566 181.168 mo
295.026 176.284 301.496 181.276 300.162 191.656 cv
292.327 252.65 li
291.707 257.471 288.608 261.493 285.503 263.285 cv
282.397 265.078 279.285 264.643 278.64 260.552 cv
270.481 208.792 li
269.093 199.985 275.517 187.547 283.978 182.662 cv
286.566 181.168 li
cp
.768627 .764706 .92549 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.2.1
%%For: (MSI) ()
%%Title: (2002.i039.010.P.m004.c33.chatbot messenger AI isometric set-05.eps)
%%CreationDate: 3/27/2021 7:30 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb",Kq-Oe,oC2YKIQmWn`:X1_0\pdP.QJ(MJq2jcMBNi[1-*R`Y0RX9^\t:7T';Y7B#:3MNm6_>I6sj8WiiM*X/k^HcaO.]HD>VF
%Du[G3=^rf11E-2'`ji!\/5uT?O8J[D2%H0`RYo(-D:!B.rI]""k4EtR[bL6D2DU!TeQ-:cH3(c[1[c=8D1Baih.l<ag>mGMdrN?K
%b3a)Qg<UU=KaQ@/CAbXJXe5do:?CX&DA.nfS:2RB!e"SOqhI9/n;pI=T;<'Rc:+M[moK=FG3e0D<mC"MU?a&%;\_M^B,_]mT-a7e
%;fp<c"1Kr'bQP?3CO\?s?*%T14'9q+<X&uNkbEAEnJANBJcAk_pqNKUkVrFb1MTAmiuB$QE==HL(eR9HiFhR9?m>b]aV%=20\C5d
%Raph+058,(d]q9f\CJ=R/ZWL<=Zp8.pts/"IW\aBT)pQ$X(`HSWEGKr^Wada7YWA'OYn\nIR"Lj57Qf17cp+;XZKg,iH*iS;<*/1
%^m^:f.:2Q'^id5l>E(hjgn6E,XP$plm^Re0TR#4m&f$'26N?^n**9`g:*6FDm1+*W2DUTXs7UK[XAlqr8>+0GAA@03Nn\JcU2.sS
%kU[+gTB16Nl';g`Br\qPn/(,Yp%H#:5-P:,D\JK.!,-PjgULq(2?7`I>+Ot#4n!J3omiQ,T!?4`#`Pi"qUbH@ok"T9p\R_/T0D;5
%KtYjQ:pPF<3-M9$0=74Y#X/)A%pPb3]>\VoGeXH4cu7:MT]6&?"fF$.d%Je'NrT%;V>/:r4`CYqj%d'Hkj5b'gOK4-PcM:>SBMqM
%eo,b@=mMLSZS1ggEb:.dD<A?4X[+&u\#bdq2EK%5F9li/SW*=Yg<uVms/0QA3uXJZd"*Ss[Jk1$FskeEW0aC%"1R!aFu/cCm'+q5
%#C`WRSq8T"U=4U]W_]:R%\SN%TfPR>O/W]e.Et\S7Vee-.][aihqHm:>VObM&E@SNZd->2FZgdO3W7[nE1^J$&,1BHm9bI<E*Dq+
%`.Ib?^bB5'PbirD:j(U67CV!]Ct(69m\"cl3Gu<3fmCs3Ehr2CoFnZ,[Bd;:]<2$tJ7it'YJTdZ^tqJK.3;3lMAlkNS>B)1`0BNr
%+OGd934@,[[jhr:V/_fY(luBice<93f9Et(9+G@a1hs17oY&k#;K8P.)GMgo8(!qST"O&%@Hk3j_.>]HZp74(*"<g7-eOpUAd<J*
%bgC"0it-tCRR]Z1qC+tBYf'^Lqst>aag],"D5UU?2aAL'A<pO_h_P2')6nXY>.aAhUI'IjIKf8c1\pm>Ish%_O0(YHaJgC+c26_]
%a+05=ZfkoJ8,SR+:Ot\upls]8cBY*DEaHjDq!bp'+,rI1hOopt\):c6#FjoJ"o&f'V0ohH^k]a]_agPa<mV4D!VDJ*=g/5kI;h/^
%K`;_oV*Z%a70Pj`4rca9I5L`_n1j-:_?Vp0-Nl.WiC?o3_s*rDa+03W*udCh5Qjg`4"G"PHoQLQ9o"c1+,`rpcq7L+cTcLTe05Ae
%)5(eKJ23M%?8<4I_acKk__Q''jC'Ma;h5H<2:F8L+5>#/"g__g(5IqXbmb%'[VS2e!,\"&ZH[3'CUO^YR'm1^8+[P_U0Ynj3L8^4
%@Ub%->*T/k#-7klXO-tIDTuAm9eNY^HQUH.R.N,sUXMa2KBV:d@IQR!-n;=*>#n;g5qF1fnq8t"+:\Dl_C+>CLC\Q\ruf<!HiX2Z
%$m/^b>e1!<9nDIfJA_J!6jO#s+VFgh3'9+<Ii)7s_TM?siNa]]!5S[k(a+aYQ1jE@d&`mIP<MOb8D/e%S1Y;.bn[i!T+ZO/6uIhF
%S;mPNJ9tB7=9BR-)M!TAA@>qt<Z+r;#bM0[Fq.Qu[OfUTF[T]c!"%Fin57E8=TUo@^l%;`'"2MBcm-ng:2!]0<+[ULfdHll'S'A-
%6oC9=!X7hm,Uspg)2_bO90h274V&[f0Sl\I5/\a)eVC($5`b^?/Cd6.s!a9(oB.4Ts'n9i0qY.h#\#B,s"rUZ<X,FUVDAT2)_g8&
%h,&fBPuVX[U#hJ<!Pu@--4-?o0S'O^mD]hD]0L`'oZ)="pMbLf*jD^(B39#D(9]Ui>8s:K['g]])pm;h?^ZrJ;D<fskQGO\0*];3
%kPs/&6qe1W*kg5U2r$T#\a/g5Acr$Y]2s7a-7jQu2JQof<kI7mq.VXkoP`2q_2i@S8%Xbe6/M]kGSM^j]%uXjS_@YmX`p<Oe_lkg
%?'&=^8,Q0_4%`<DE=$T5IlXia"J)tRU6Y_W\c].e[mn&\R8C"cD2MLN!O(AF<!.4+1bLEX.A62]:(!LJ_#0Z'NdmrGK^U?Tpc^\L
%EkA50[rY\8A_2R_W2G.L.npA<2L/e!Iba6t3[`cQY.,1]7;B$'"(g22@Xl`f)n8YDk$3rfdHXoBaNc.;d.O&RS_h.V_\`9/P6-MH
%%ng]bgopCOs#=_+2I(N*0X]V)r<AXTf7VYLHK^#X"'_Sp`2#Y!dB<fAXP.a<?0CMRG$Z)T0N:7_ZUob!NJ$/8-KuLWa#$+]+28:!
%=X*Ld>R+fOj,i.V`S(Gp-Ui)Hm6S5Dlj-s8$H\hAIme=dVO`K$>"Qpm$4!3uIN_d!O.:PG[`^8IJs;Pd-a6p!c81pt;f:lN=dX6Y
%"i@@.En\BpqeqjBkM7V$p?p+IUUMr>@Y'rS0pc?"/r[@*1?MIo_A9T8_NnEYEXQ)h@E\VBq4l2u/XHg3RBbl)p`*CWl%#.MHS4db
%j1%UGeU%,IY<JVK7=44A*@10j=YpVAi$Y"B%`Ef';lA6N(S-$oFPA(+5nL1_@4blb3p?5TeQ+l%#,b[DDP*QqSGno?cf,^4`t@HB
%n'ogBh"h.bDAjA?8DO(&/`_?6.PnWY?.9oM.(i%D"M\4hgFX#Wr7t*-)t`Di9\!0AJC8FP"1Qu9rS)%qS5pOT2VM\N!2bOTcu/OQ
%eJl=@1mo&*30X;,d[XrI!2YMLkRG,deXCPYX/=W]Om;N_=D-%>=OS!2"j`T[CR?QM^mK.h(l\;j@/MY])#p)8NcEE`[/-&0:8-4m
%S&UR<)_.H90U#,Tr/$]L46/rG6rS$)h9]pnT;N[X`W8scc<"b<Q,$"U,-2KQm4&Ff#RkNi0Y!*+-&@p5<a>#MqNjpSTB9s5VH@jW
%H:r;D7-I@71c(_qZh#,ladWR%WTD69J@M$miAc`bn4aB&I^MQ$[MEu2l!??*adLY%dS&9h>`W*[`?NIf=7LdKM"4,hB&ZZOH4">_
%h6!)[8Z(:BRG0kV[+fK4lT"o;EDX-S[kSEf2GuMpB#ZrFfb>7R0u;'Vc0G-?-O!5XJZ3,Abg9/GVjqqEEbhq#'@hE`h9I=DVG/50
%VU,a>Vi+^d2E(5E/Bt#SBkLo`ju#$?.tr=jB"1n\@&ABkUq/B@jo5.b725)FD!j<r(k7i@5FE78Pp0s`k,u\$=eMbW_/k%65F%J'
%FpXq>0iSnp$770KE[dO,L!+53jg[g@9CKfpnPP?(R1ofGVDpTG3IISr-H7Bq!l\bKd\[%WlD;p60^_p:_=U7jUnFVlg7'_cMT[9A
%9sN+3\CI%#mt^:14#8=+RT8Q(`DPB+=?7mIkaCDE_:+++Ofp>,om3:qCDq'EY;jcW3;l/kNT?TA?`eQWEZC:1DZ4gF_I5,S/0PHV
%e%[umD"24@ajOG'rXC;LVJWf5V[Q$UDn'\rL`L\[C[<r_:,PK$1?bGiI!mpW5XEpl!Mq/X!T@OC1jNh(X\"(@Fh^qkVZ6l[G/)a*
%akK8/8V,B+[o2R_C99C-%`Y$dLLCNkSsUFc@[56/Mc:\RX#I;sPJU".V_O@g;_>N)]Bs2Kk"O;P"\7/fdlYO'WRi*apiDnk,-+HG
%WY@K](c6a3QNY8"n3uY=e?Z$])U25TD"Y5K0F*HfC@`-rOp7<<2f@cn[TTpPOXO/4\`YXZV)D,3-tuT%c!2YhRMD9;-9TnR.&k/G
%[#:<j_hV/DIMT1:ZQ4s%S#9AQ1r)eu=IKWCSOu28r`GC!-I*eNj``B#>fEGejuO93r<He/d]DC!$_9^;b1,pig-!?KU]G*(GK1mC
%-!$k1fB73e0r?;J7[ju"5243N;MF![<aq1"@?J=o`\X!_r.V];dj!mN3W6pGX'(ZoC&F'Nlo=V4MY':Slcl`Z/GRpnpmSJGCFN)a
%i+i_7[btpW_:M:b-s<Kao;/TM\>Te<[btp#D6C<Df&fS->B$tR=8Pd7[IB%"kq>5rT1.n.!X8V'"2Ml6](n6>(Y^>A$5VB0Z&OLI
%d6Zf"a$"CBhbWFo!on3KKkE/"q3?o1,#hF`oe9CQ@]8^Ro"V?VCa\)'T=*`3/AjBVP$pEL=387mS+%HtIhR:PbYaI:YCgP(Xp8X;
%P16]m8OF7rC)0re(0PBA6#!^kc?Z1Mr8_gMn2a=P?VIkk6?OXZg3b5q\PC?C%q^3W2V%"BeJ$Li'>'kHS>ittDXD#ML&9h1DuP#Q
%[a]2<g-$"Jqh#U/Vp>c)8DG#fHBaYW\P5.I\FGF.:$u7^OqAE+I5I-m+GGmF.Og#t]Fn=\@`D.M(m<g9^q_9%6^Sh=;\m#\\'_s,
%3rLm^I\tb<)PTkcaG^\$2B>1E2^0TVr]KjF4jri^1dG<jOcZ*PK8:K;p6c3k>28b>n+5F^aITh#s';/pcGTH2XY?=HF(I/hC<t+l
%mp&%MZ8hFrA!/IiHuB%e`L62Sb]cr]/^Aaue*cI+SG>pTIBkj(?(C`icFaGGkCYV;Dp/V/8<Lcj2s?ic`'$_^s#<o);K/I=WN#'"
%F)l`#qG8drSOI9h$EEQTlaFQ6&";7_\ElS:[2S2/9`a'hK.1+bDlXW,/[.lPBpdaJMj/6rg;Lg4H,p+;DdIN+VmQh)a4USGZ>n:K
%r27qcSc36QWGf5WeQ1[D_8:=Q/ZuG!UV7,fftqm?E1QqT>\C$8X+gRiilVn?;Ok9ts4:ooqFN@57@(or3@VNq;Lmf;n5i4X9rRK5
%h)*(TWT=lM=;-Zg.1//1ipH6g,l9D>QB"lG$/R94gB%6qPmK>%A7F8)MLFF/p'*G7BTl!gkg*eRmWkV&b?=K8c&'1DbjF<J<a%Ih
%-L?!Igap>4id"tRs0?UV/0$;Na32?iZ>dH-*%q]?bJNf?1[?k&#N6$qd_^QW_hf@YVYa&6OQP$l0R%dhDR<)9ms_dc]>0Wk9XC:+
%,0c\SBhpXLk#1o[-_#&orI\i0d>^;Im!+Y*i];CT@%N3ZHjsT.K6*qTa[@'DqQD35Qs.<]mD<ia1,8UAEKPrh+W[IS)k2/iGXEEj
%l@n7B"4N<>HeN#r%=%^nqpH\cd\Or@[sNFC=fo0J/Y:hpOjm%1aI22W<rRJPB2=WiD/l+pJt&ZdIbo/B3;p!Y:J#XaZ^'Yu%Q).7
%T(OAN&.'c^GIh3RnKKScRdcp+V_.LIZiPW/=j3cu0Pr<rYE*6J/@;sod$U]c^Rdd,2<q/-\@d-O&o108"3dU*/dt?QS.mqu9MY[a
%)I6j)W^]#ldO6'l-O3&ta&o.!?MH6edJ0.`5DHH4@na93]^TE)ruSK.^lOT^L4p^ZasHGlO"mbQI,W+Jpb?C!O+A'M^R?VnCgis\
%K7.q"Xk*>KpLUt!->ltn],!-,qh]i&9As-C)(djC(8BBQ\IXVn:T=O8iQBW^6;u3:>4&)6UL-[bk=09$XEWH=;_:hAp;C"q(IuD<
%-3uT#+rAa3[HEddcI[WrWhlt?L?d)5gRkN76Z\Z:B9@3^=X#LsmbA/Y9^t_J^R[jmCJPFt3R5's8t;GrgW_P`S#T0iP53<@PX^l3
%&#KfI/]Z3-TR/S9!S=[B'V)ct+fUF3Bf?nFks93*a3KsFPUZ2<n<F?JR0iX\"3d!bH_gaOqLcH_&Ug+4TjX0KIZ";^'M.LrVj>T]
%E<61u7gBAM@Qe>k4CPBunOciM)E7B,QMYUQEp7i*_O?t<DHU(_$YsWgbq6$-a]W[6'U"/-2\4Kp*/96nR6?l\#Jn9KRkB%?`KDgs
%\V3&Q0]s56gur?QQua]-+FTj*\Q$AgN&eAek.mW_#K68(F=6I!rM!Lj,OcKBgcX51F-_h0jW3o+-f'&p#:"qRZcFXO@opW^L*s@K
%AH8)DXtV401)>^1k:f3AA=V%"W2noXhMj>#>.`M4Ln]'j>&3cFDkqEUp%mS%1gXq#hP<[pjl=67_j46<Etb]=a_b!H_OJYQ1tTTo
%mTd4ab*Q6*op]ToRD?2q1d@:ABg*Qce&L9C5JfB99J&]?7;pO9YL]5==uDjg'<+/E\C*U.3UM32:/&(F:E-1-ZUjIT61sV#eST7A
%cUFMDg,L5j#&^re'X*t7dgGJCY?t"O;(uIY%_"tXPGV%mcm$_%\fmrJ&-LJ_24B.sLRPO2Uu3t*,dq_upa`1r3)k+=l;OrR>GdSO
%5^)fY-UN0iipj"9eE53?5P&4u/cFF<\"$FaD7%D!F)QQ62dkO<9dXJfhW3qQKh=O;?"m%Jg#&b!c)agMd"rN!d=4q>3qC5:9IiR'
%.9#EUGCQr#n#'Ef/u#PIO;"E$(fs;.=2HJ=Q)<18\k8t9JUpN*#.MuEW&>8_ZWUhZeS_.3flU-*"Y`kk3R+-eMBdu)Rl4tm4?jFQ
%l&UF6,Zpq0^=!"$[1JA-03G)W32RjrKlC9&a+\L1&UKpm\TgITEp@4G)OC;.PDup46!cZ333>g!m4c<.=cZdX`Cs1J*9Qb$2SmHc
%lBHAceD"6+nsQ]5i"pZNVk'#1X3b.0]EU1._fqbrDbP,o9X=/HidKh#acbs5VQX_/TO2[S,k7raS93M#DqnZgDDj5IGPgMqg+IDV
%9_TmfTBC!q\*(8h9KK>%a>'rc6Mk(7RCMp$5dr@`O5p%.'0LKTFZ1urVOi;9Loa`If_p8JOQ%>?bV4^>n[YXV67gCAa:!]J_Ahb,
%\^N,h](>"R\Ks6mMhf1Jl<,#^b_12'B2Y8>&AW54]':KI-d5<-K3%AY-J?I&&R!]/.%,?.Z^h8f9q';Yr%k\W7"[kJ`5+P;a5(L2
%GFmqCKdigCKL.ZOk=eC846OZ/FQob`hJR_1A`<L\*QpbmD`QF_*DS;H(=#W7jK+krcWZ.d/^<4.O!*9)m5!e1e>g^4OJkjnU=5Ir
%ecGD0fg=9&o"9%kBSCs3o8f4YqTTYf*Ol4HmlnEq!Y``,gLj8.h];>A1OIYQotos*p:GI7j)mRu`34lplS^?u?hLE?\(g=3r-(uL
%N;7aI3Ks+_"@,AQEsnWebRYjfRc1OgB#D"b;\]'E5?u.Xr;,[4ijW1%ItS-EHa"Mt[+aD@oG?r;V-L(Wb1NS#!9Lir.M5l#(t(X/
%XL(`c@*knYO(KsY/ust47T:g`Uk_4:HZ`BLRiV1&[B#cU9/Bbcg2#1^6Zq-bcM0l!rc%VD?KK]\Fpp?EpCEfu)b@;1^P[miC-hr!
%Dnl>JLQZomhnDA/2d"eX?KT-q,uagWIQYOjiW&5r5OQ8pm-(9B?ZL5)i4(j)lNbsX58LE7la5s/i*neWe3aoQSd'kpe:TB:B0IAq
%6G$5>2#9cd6lZ.MP/+L).El3*^LlkE:P:s"6QT?"B'FHa.K/;6p?VC^Vhk/"$/1XCF_V#KN;1eMBJ>"jRL<`>@($GT]3r&TAp`jf
%<b2YN]3r&TB"MHZo?;#L/_2L/gCI+e*Ou'/@:jl9BQi0]fd`D<5qq;-&UrS;Yls;>C[)638@!ta)jX*''[C-hZF7UYc%e$/%8oPe
%@j$'FXmu`#j;f\Wl65'+ohLg*WpB<SNWA+t/H*5J4rcod?GB/'=<Ek9")n3pR#Ct5k8sr:3%QYP:f^umkHrmA'"rj(nf$Z::bjT8
%FM;=0]%),E!Mg]`X7g=qR9I5o4ejWb"qL'NjY(RFq)n:-VPtEl+<M_(U?cE/WX@Z/6;sY[-*$m9=,\Tfa.r+JZaPctrP,R$FJq$1
%"E2`-G&>S/A/)(m_"R`UFh[oJ*rh1DpRr_jqN(G4foZc0V(;LgFn:M\8b.,`595)[EW:.F6*#5+:USs3]_8i:.cV&k*rjF:oV-i\
%4K:[&^&Ch5lFH<9Q#ge_Cmp2fF`f/64DV=nEV/QMTL)qWR3SX0P+YAIBXmoB,`83ab1K(Tqkr[TdD1!n<')>L8l(rgDU&qSr^kEO
%YjQTE4Mk5?o_Rt;'X5>V-..]Y'id\eTs,'V;sNi(2b2KW"oI-IRBNaJ49%2BoK<;H]]V1fo>ASYc.";nF<e,@kZ$@mE.;ZQYC?V+
%B&_@2$MM_]e]o';;m1oDdRj&9"AQk=3Y`4/0uF(91BiH`?=+JSQl<KEAn6&72Qm;Ng+1E)NUKdI)"X;<M=@%Cqk.h+SFc`/[rHD9
%";jjF[*dB:(;qsscs%RIXOEkHJAdq7Gr2(@[157L0:7^se!%=HpDbQ[BJ*8RMA1Q@k$?$,,;$V9Fj:EG;S<t1G'slqU"]@@g,j'I
%De+@YFrAICFIf#PrQ!#"49,"1V0\nD4_qQerq@"lW4MWuJ:]]CABHM9^!h#5U7Zl]A6m@"k'$.9T$t<q**.E7Vq^tgGl]^V:9X$p
%jNYrC#5a%%B@'H%_uk4*DO"u&@SjaW1'd3lT]9t4@<Q2Xgn`e@AA(U(=&`tI?*?ea!k_I6f7VHS-C`QBeSn[AD=iQ;hWqQG_<U0+
%1V#fd/R`aU]-+&"'$+=cg9mt>i8gWeQLH0LD#g0-I4')j*q0BJTep$/c?-',=LVV33H2#BPj2N6Q:.dEWHS/Om:s,%Ta0+'*;Ym6
%a$]OrGd!i?m:$hkQsug#?&*,HTgQ#8U$J_M4=Yt)*@LLo_j.Fm3<[[9*I"?Tkh9p,WhW2NE5@^#AYu=[6W4DrLMm4t]g*T4iKhV$
%Pst"lTnQ[MTlJnqYYqu3#Y^mSp#XA`3V1eU'DpjeBqHBZ1_983>_k:BX`g>XUA*f+qrmSE^lI/5X1F']BAiJmp+LE`j)ufoS>&4h
%U4O3\=gqpq"/h&;[IFNL#KZ+nlB_G:-aCKM$0IJC+jV.rbNC#GoEb/g81iDqa6c>BF"S=OlpS>1E\`($Rk[p&:t9<]hoGd^W;6p2
%M:l%'%K#q'EkCFalhW1!%87]P$bn%::fOn`Enk<X4uBIMCK21]E/uKeCEg&BJF7N'MikU0hiH/#a.ZEUUIRi65+#MeIs@+XJUKDS
%U4C?bS:;OQRZ;0$UB=^-r?hQ]QF]>5**p*oM_9"u[=;T3@35Q=<[mXrM!,5Ul1dTLrK#Fpi!Dq-$1EBbGo-TIXlK#[?+Od;l[]'&
%]l:^+$ta+3"s"\[Q_>Y,be?<'7/D6)oQ+^(Ojd08]tU;G!5(=Qq<Sl,d&@8%nY#EUj2.*AGN=W:4X>1gc[\iT-XYD)h%SS]E`Z71
%>#fP?@3X3YP_kN'dBQfNFDu?n_*kUDUYT$2?t&<PC'V\=Bs`[#]mE(T$\-fMlA\(c2"&EGLpBEN\OJjlYm]%cOAFr!:BVk'9L[H@
%!I$rJgC]4'*ALH9hqOGeO_q'C<BC[mRAku:,1[>ub5*'^Xn'Ba.T1J?GSaYH/?u5>Z%]Th6^R!m-,)e/lOao7Q[gef.4*-L*li;m
%(^ApmYTB1&lX/@Y=mDgJ]"UMjpD9KL\:n9''Y"N`B_)Ya"mlL/bA1j8J[9QI:7L[_N3CsIC37`$1KVca^q(;M%UQIJ6*_pK*Sec_
%gLn.#o6)H+e#l&[d`g#UrFQdiH@ckFY2?d'?=hGZ>A9_%B8%kP=!SIF2lkc8hFRT)"@]pEoGh7_U`0IV0GM)2LH/U@LX6UdEcFJ>
%qJN_oqP#9u$QS%W<qkm59\V:E47sra?>_:l/3<H>HPP^:6-Znc"nCs0)i&+*jGiKkR^SgLYtG@&_k(%)@p-]AWYof%1+g]/aT?38
%RR#e6(\HAP[JOfJ`p"8^.ba[Oh9]+PDJ&Q0pdG&dGqK,k!GAKHcG!qK>u8/F#o&0^>;=ud#ZV?Z0tC<fJR^`VH[-.*lYa5h#UrS-
%14$._E-8)1\7gRjCd*m"STu9hZ$fNpp3FQhNY;f/fb;$`>2C-&O&;"pDRLFfN+/j;g+?G#4utdF_1>U_MKMDY>@T.,le-Ft'uapH
%MDnf3*+]%[]DK@YDN1bf$JdS0>7>nA*D_5m-3$f4.>cS'&XD_Mg5>o8")4siEGOIPE%Fkcf'86kAZ4*s\.M5.!gKosDRGZ0*F?^)
%!0GiR>%g$Xjigi/-c7p-#ahUu%Na=@A*O-7pDa'=$Y?l?.#WZ@UV\t.MoH%^lRLGrmETis:mGaF[W5ZeDCE$cg2YNREE;K#`[tRt
%T*WQ-'XdgH\?;kP(,[NTU!QJ2e.-)RU2kK*EVnt4e^)h&CUg"8eENR6>@UeXf'<djjIT?2<iZJ`"qHeuD57D/.-dqp(;6&O3>Y\;
%J;pad"thqbY+[#?#bn5>9lDZ%ri-UHGWl?IH^@_d&tEso_HK\V]eqC/?\"3ire@G@EP2>/:,_ARU?TWsl].q<jMQeSH4acr`)ZHJ
%A&rR*\$eRkiD[@c.L<]WUS8:))RYhDC:643E?'aKoYrIIeYj"u-p(8#kP<$0TfYqce8$$-6[`47Y(/sq9-IW?gA.CA)b4&*P38G#
%NOPmdDA=2Uf2oT8ii"`P.b@SeE$q:2/JS\+)oc(2LHO(fdg[g`EQ\?IcnZ!AO9lTih4qC?pTZb_:p\umP_NVr!71K61JtWek7,Ne
%9mCL$-dlqVA!Kne$s1IG2>rt6X_R%[&eM>"rWgelg2emNc%lm$eiNrP/&n8>g^c*Jb8:K3;=u#D&'Vp\a)uDi/smaN1c/B;DQaS`
%@*n0L+`t29Q,*b*0IF[BD*pM5::2CEM3m#XTNLnMD5[lN4+6'-Mg@+M\'Hi,ihs"Fc8;:[_Jlome)oVQ(rW>5Q[H]k8a`O]]5-Y"
%^e:6dfA+uLmQ^KNZ?>a5iF_cMl>uX7r`Xc_]@4FJ\7j]D?G<bWoWZ]@Apa92f?[(/h2UgR4&>RWV]1o9+7<ui#;rhmid97)VJ15h
%V-!Rm]NA2%D/XmG52+jsmI[i60DIR:Zb9MPe+IK>n)l?q]rGmeC!KSLnb>\XR*@h-(`BAPIg6(E`U`s:oDMG!puQ!lHb["XCUP`V
%TS3=+aqNh'TNp"7S`IPq%o6T#ijnXX/@N$7VL<?rH1g.bgi4M7-@+*[]oA*->?BpIgDdhBF/?BmIo'J*WLq'^KWjt0e,;T&r8WX%
%GIQD;)s@%?Ic8_&cQX5%r1I/%Q*8qH:EQ0aNaU;K_P`;fD><h_CN6htHRHR?ICY\+>.`N%PB^<6%q$7ObL0"b<7>2+'eZoCc)ocL
%ota9"jm)#omD?cmjao:5o]49g]9f"p>4i6;2-*?4PtNhg;qA!][rLm.7cVthHJZ@8o\ittjmPL<EqJ9?!jK>Nq>=-E@>rGi+1H<n
%g;E'qj1W][Zha@UL2!gbcIH1/[`_^S2ONj:<d`bN".1kd3p):!e2J;"odVLJgO$T?[d)pZo:RO?GZVGj?.duEHW"%TFhAPkh#1X9
%I:<uGT2rDWe3@d=Zb%<Yh^>Q'!7DP@d9U"C&&sIrWeIBtP.t0YeiX"^;m.V9j5%E.H?JO>q9I.[/e2CL&"fd:WWL'dB7K;`oZ,+<
%ns9#el_O/>e1[nh5)\:m42)(:r)QsGnt`Y8MbbuIHQAY>hV,&\H23:t;pH6VgX#3b0Mj;">Ya6f0EnoWp^h4$)O9Q2o#4NoGL>Y<
%eVs7BQWigepgp:H^Ad,-WEO^p05mAoIUsVVJ,;:9?cX<'c]8uO\%dCI\:A#Yg:QBDJ^F-\rI*ppXh;bkDfbg;ig5kX6K=!/^3SSJ
%Io.hg5@T/\-_F-)Yhfio[#VjY?f^o2O'\'/bOlYQ4$Kgd(-iMrGI"DQT"_1Q'd,XoXQoNAEW<5tnal`f'Y#=IL+qR>`nTo%^T/U3
%62LhuC/oRe^OO'aD`o[%jhJ9)U4]So>NI'UaJ7:NI,"WW]O"IrL)8HK$pd'Q07*f<'1*@%eappYmdrLa]%L9OCjmuiS\N8.Pca!?
%I/2Ws/MWG;7Z>0Wm?EqYFI!<$`o0p3V33D8oEtKR?(75+;5oS/\dc9Pq#GrW]3MkU/G763g?ZYHq4=2eYJ\14pJ%IT^NN4bX(QV2
%ZIi7(MZO<N45R$A!4-r[(\<o9=)mi.WhF`#n'#k*4=.0"*Go_ZI/4*0jTB_5>h%[&Pp\YcnM48J)Sf?70:.R-R5`^jh[o7uZ=e)V
%C"2/=kK]k#Q[ZW9G?]">\`:lBpRmQ`/$ae&Bsmo&QQN;s+**/"QOfeC`s6m"V/kh*cK4']_e01t[s]]-@d2.lB0Jh@&RKiI<m056
%O5D.rs'.\8/l-Mkn(2m5H4P%O`ueRPMn?Ddgb"Tq3)!/BrES$u?S-C=jfKQ3'Opb(%j+fhBE?d!@bj^<)jHX0Im")`cd8jdcqAfY
%![d+NNE!,GYAEY#c@LJsmco'UE'NED5!L]F^Y66EgKVu2=fCoe%If"mK04KF36`HQNj[eHWf0%L8t+Mjg;X6"ADrNZrbh&dI\C>A
%0<05]kPYqGb)<*.$3!lL.kb!f-b_`npXk4=DkB9tFZWjJ0(RKnLC%%aH7`JT>nm4&?f9\EI39GRc2A5B8#!If)<s@JKPt4TU5E$_
%isd4\Lpb)?d4ii)E$(e<b8/F-l:#VP@SSmEl3/M#_[&f49:XRRr^`9!]b+L+$oT3IP+;16W0JqF44'UMk/5YEoB6)N/ZA@=.K&?r
%/rWLCJ*GFjO3"G)+X@>X^45q+n)[J#5V<N[?*3np^$/u7X[FiO^U)t\$`<4>s7!rs<<OP@?LXj8)Bp7CH?9ckd%je[JjFeU]C^Q3
%r/%dHCQh")@qap$SOsa%J6k_876f-QEVL1)&i+inKV6?-Z$7Pr#smt;0L4>Gi6]Oa;"bKl:2%*DJ3Q/QN/IRj;;XPLq^,FNkgBh1
%@@*]P+<tdIGWQS.iB@O2.ZO,?>8sY_;flA>1kbP2!k8f<ajgn?M>_Zrp`X+BAaoa98>A>-UG!S`r\jlb!>2P"r&^nl50=n\H-n*[
%5BMq%%QNW[q-iGi+?_A-jj/;B2Tg4bAPoNXcIms6CB//E5bBK3D4fU3I8O[*3o)F=Y.d(2Z7Vk^kl$-EF!n&IXIPB_K@X5Uih<=e
%0@lG]$D$ZoGPU\mkXFhmjmMi3LJ)gLEcCffpu99EHl/[WWKTD[(&,1u5'>1J\TPBN/3:u^R2-_p(&)fcm;og$r9O2db9+MrIFBXq
%<fbl(`[Y='R?fCRG#<?&Q(A./(F`2,#BkV::HSI.g(.>1@Eel?=#>GE\(j.`C>28aD`)4:em@5qr&]ZI6Nmg=H2[]f(b[<h(K-oT
%dWe>l\bPH_,h+[S:)MOo$i/7O@)5r_[en9QLY):(4LOG@o/p`s!NLaSk0EH=HeZ$>T)DrBOZ+>u#g6lV=5+f<j^6jDfI'[%H+q2?
%(fZ2`'r([T`f"YQpPW/`0SbAf,0sJF>jIgR`iU6Dp0YQ7ZA39HBJc)JP0G.HqSY'/aaLCWGE%LkA/i<<JU&q1<G0(VF*6AkIJ.C`
%h&eNL[bBX'r,lW+/">89BYTf8)eSE0a)#p>8+-'X1r&h.C55UZq=a,9[V*l,5B6a2=5#OW!WN)`DW10T3u]m6do2kA5%XiR/96=>
%e_UWM.L5.*gaF+T2gibTn],j*+!f)])tg)/i)2_!=OK[Q]N+ei.sj"oT0>HM>;!;f\39Y9]4hTJ>.qEE_(oekkP80agBW-%?1XmO
%e\Slp\Q:GFhOmI.s)@Ntp!DKCTU8f5ZNI&PagsRIIA].`[(ebZ7fV"+__@6/bM1k@j_J^Cn)PpWYc0b@r/:hf5rlC^]:mOE48EN7
%D3.iOlKd;ta?"_DPd<;UXN;QE[BJ7Q:0;;.ea;d3c_$IE/[&p)\k^$@>-58!>TK-RVos9:&QX%$lg.PcqrH;MK8n'>UBX7Vq[8O5
%Lf]YI3hEGgT6DB*p*adBDXNa\LoPJC7s[h;NOb0u5U)><2V7>,2=OP)ho;@Xi&1dTZ$fqloGRqE+4`W+;Gm9o)!Wl12^$W=X#hHJ
%rGAXAS\bc$WbaBTc:d4"bO5r;\JO^:?**/J(GG*nHIH3n8T<oI0^#&X`PSsn69)*Tml\]!LOns'SNPI^SBh]c%oppcf(3eQO?od7
%/^d'q(bt0rf@J!jl)4D#@/:[`[_Lrh/P-Ot.B*i&Y]9+q+N*&))0A_:>CYOdC,X#F5EL`jM=AXk.T#9L?KW^dcUCiT9.`0#:]"e&
%TWr;Wml=`-eQ.pLF4ufU$<Z8D-1h:XI.cq$f$i4]MS%-QLV3WKD)V.RdD89>n9Cdgqr[n'7l,Y6lJ8ZG,6Z6Np#>Cpas5D$%]Kg)
%lE-hkl!)1=mN%Qgmlktt49q,4?0g?^nbLW(&udto(EiD1ir0ZhLAf`dq7WQHQr,^PX,"C:as5q//FRPk3iDdLgMcNQqf:m-/G$h$
%UL,IF;4,srZYP]\*o9b;5O<33I7TJnIbh[jkN<eDLTgD:f3?LbMsm6#M?>J/:LAZ]2F"W7r&q46Rn)Vag?/B2PtgGjneLuV2I9^+
%2G1%;pC,]Mc>lF$q;Y5Vs6(WWq]_HQ#VFm"JSa#O'^EqAj6]V#A`:n_+Th2Z5.Yr%J4fe5&6=,SCIi=7\l,hai=els7HZ$Ql]?g[
%qSFp-QbP`=._6?X:lrAEr,h[.nbhTl]?p?=SdtCpmH7YKG2%"i6u.F^\)4?2m(N"5QJ::F^"D2cGJ\+*2n,ocmI$E+5RtJu1I'Gt
%(=2Bol_X>Ns1o7=m4[:Na.NffHC&DSmQX%677fs`;=s&/_=V/>:No1%o&R'L`_hS@Pq*m<9`'qDaj]8FWu_U^_)8n$5.b#Oj??n7
%$elJQcgEr.]/b6:.MlG<pZTfoS)`=>H)oR.9aCIah7pBW:7R5ZX4'3X=(]Z1-,0;5edH0Ui%cmc6N;u;ZF/`\2-6B:43pa[I!rd*
%:9Kli>dMpI(]Q"YOY76Rhjbc!6Cg=qSe$_3_tr*\`lg#:+jD&,F):bSDABgZ)nBn%ju=DNjI78&,>7OQ?,(JFIJ2(UBOQi^gE.-%
%IHpK_X(UPBf(-NOYCRnTIEa_FTBN%<oBIt?B34OnJ_FX-_">#2TYheR(XJ/S?k4aMc-TMHm="oFF2*+c`HM"DVge0Kh9EsdXUT=C
%@Mo]3hNeQ4:Xrhlq=Y84$mrQ(L$D[Pp\%6IiVM)9ETbGl#P8M\&>%Y1S+f)!mq-iZ[sio5khjH5hA2Za:M<9-<WX4;*YYN6QBj,9
%]6OJ#da"3750L!7NBb,1hKmV\)r?gnFp-^flQJYG^")ksPLiteVm!dYKe.kq$q%F9Wh7H33*&TK<N`]$28'/\Y@X&1nF\JJ*po5$
%*Sqgtg:?gOKOFlX0<Cs5Q9_EI/iNE(<046&&+67IZ4ZBreg>)58ADjdL[BKEasm7&q%]"BB;JRSf@>f6cT5G3b,]AYoF+#[47BU`
%3e$^$Ng7Z2h`hVp#fP*1]PDEB,>5p9&2irf_L+1*eoA4)G.uLlY_IQ@HdA"C]^'`)&)$b%8dgLHZdP8Ioe<K)HX.QLLR_Rkn4_jp
%*qh"m_fhk`>i#E`pD'X-JXgmOhU!qe9!uEmO'q5-l'=uniNlr%jQj.i$CTA4kKO5B^q0PT"=d<.<j2i,]9K,qa'lt9)Oi+NQ2QIg
%JAY/uj6Ae\KDkT)*Xl?"`XNBpaO*el\(pOp=@"%sm3m5^ia2UfGZh=:PCQe]dX,m;N"T8@6M5Tfeabf/?s]upmVZid\uoD@I-RjR
%^b?4AgO+?Fb#pg>4s$N'Q'\)G]d^2;c/,>(nXp1b+"i>(Ie'm<l6UH6V_ojE3X7\2XE+u:&B'%T^T'I"-*XLfSe%@Z0I(I".^"P1
%a>7G&*;"9!AbH]aj%&5%p&u$)dGVN`4W,2L)&"@D9%X4a3oQa-D!g>E<juLS/fqDE_[qfnC4j8rF4OOg02r[G+X.$ae8k-6<P<:_
%H2[8mANh\..pRP%s+MfP?e\ege5+%"0=LkCkK^ui:erTC+-a2m5J@>]e9nZunC=^"@/B>q5Ra9/EegfH&n/o4\(eUX[so-"4BI+1
%n)c]Ogslo:3-]?_T+5&g[QD')G[.o.NPDo&#Ce[k-XRs\^eB(H[CfMBGsj*,Q"3fWHh)Dbca,VA*iqK\2ZG7)0ETJZA&1:-\$o16
%n(dfI(3i5+lLim$#-U3OaLc6SGj"Jk[k1^OIQm9$M(1/CSIN`657T;#K&\!l:M[)_@uV6K]\j.YoFrfr^:nalX8dJpf/gP-8NmsT
%ne5r)<"-`_7/D<6HL7U2i:,QN?u`@S_64oVS`Gf<S&YR+m&TM,'`bsn&oht:VE^]'bj$UiS?hgn'69l]^@DfDNf/r:la<kFG;&MI
%CNUHjHdG#kB\,j>.1,nN!dUeQ$$<7r/[tc>)4nHH]L,B^aIHT8"gZ#@YZX,'ImF`l^%CE8\R`/gV,)"_?N]b"HP]W\ZgiAA_\\Be
%<6B\<G$\MCDmi:r@p..H/MB',f']RR1>%B<fWROVfIK/hWkS5A[._eVaD30g>)3;"T2mUca2Qm[j6MWge&Pi^07if(`M*IW?628L
%I<2i:osje%na::NggiocrdtVo-M=(H.U6lCf8@1XiFGIg;#%*+n!9;Hj=OW+KD2G6&.0U&F@5VT#26#%l0PpU#Ac.NoQsOaT%1s3
%m5n8'gZ3f,93P?\;?+j0WVZG6C9I7%c9_9tdRT=eipYmu46K3i6,3$?:ReuncOPqo\$+*X)Q2rdN^.P)hfu;sK,F9rAJjCpYb0h*
%\GJ!\e<4^AY*AW\CtO.dX0@qNH_oG[B@,2p#G$58ldCQ8p;I>AdP/.CkgRk,arOj?qDc[uHP/^K7cWrpPjTkubi.!*?.U+Dm=BF>
%o-:^Ij.[;D54P:J5!A<lRX5l\T;(a>otoCAgiaMD_tE?l)(&85c%kbdNLRn\EtP!_>XYZ#[GXKtkIP0,7muKZ(qO=`FF<?FS4p?V
%AGVWf`k,<>krF/c^td+\]6%5E?59501Y#M1f4e@j!ILl$iOtXo%t>#I3W0pOg!&b'FU\<;M0>#A^UFH9NXJS9Xc-1si%HnrdHLgH
%kAR^q]1e#K<\lG6m%=M)@@/Zh<-'f(\g_"2\5grE4(bOmFujN9-M$p'nA.)On8>9tQf<VB`5pe[JAD91\pYVnW6rcs>$%)O4e"^+
%\-W_kcuZ>DkZedVmk7;Dg?Y@jB5\^6[hL>FdOmDs?<6dc%VL#'2[dbgP)ikjM6"h=Q3*#fJG+X6BS6]\&o_UFXFr3kNg[^\^Y5[m
%1"l)`-iB#!g9#PcZJ07X79D[7!Hg4R`0eq?+t-,adcqp1OEP.u#Ap+`s5H]</WZC_"\E<!?:]EV&!Y"U.9&AQ=&q[p?f=+U-G_GB
%B\:;YZamEN]U9F[9hEbH>t?OL-@t'%CNlr`p6TCf\QZIj<p`tghjs1SI[9Ni<X:;^]kFe<W?C$]<kj[rF?EV.,_a81ZGl_QMSe.l
%4P(-DL6%eMNR6KB:g;tm+YPPqbW'16ReTNCn]2X%*6&GL'j@7L>c!S,;!-sRQNG%'!;$EfOY4&r[0n%k*s+_IM`.BX0f52<ST@mj
%3H9M485_,p&4XGa#Up@?Ffbr@>J7[%BnG6^HXPl\W56aP8kS77;&nFdlO?3=<kB#:+;!SR6,pir(1WP@NS=uRQ/]9j3""HWJZ=.]
%pi=_DCK2<k)KjTb/B=HkG:B=Hk[]@'j7$o$Y$VF_1#>P1?)ebmEfUE;\?tX(rt&lm%0@^n."o"<MlC.X(]'2'M]C(,L3EEQ\3ui.
%&Y<\6"k3+3,d0S]09Sj<4(S9#'=NW24or:IjJ>Km]]'U7NFN*_0"0N7JR3FSrg'5*"kVM%P)qp4BlFPh-VLs`QZLt-#Fe8lG;I8&
%%D@]WoWl_iHlE<obP`<)?\ajmn]k&-aWT'X0Q(I3Y/;>BQ<)<1r*tRuB@q7%dNSc5jqa;Kr:Oq>%!#5B'P\";?9*`)Y@Sb6SEMCc
%911F"^&@Zf*s;A3G\&AJ/:@:I"(,kM1TV#-4KduA1/c\4bVW^B=jsS`DW2JXFMmh/UJeC4g'=M+QtE\+_(7aEX":;j7EmZgfW[&^
%FJu^$`N!WbD3M"<h;VR6'Y,XCF;(OeH,ecC<j=Mf'^JH;Em(aD\nu&%;n'Ho,==ffGnNT50ZuN+D)J-KjR]o#/FHq.Ou($DkofU_
%-*(.6@NqrhMfI:e0/*F0$:NSd@hsJiQu1dQ;_%e,+Yrsj(I2IK=`,]Y`_]dgdO\U18iJb(:t;4@bAtkO\5[2[=]dYS.P&_N?Eo>_
%?)]/Y_u^po`8(-j"\)f'0@Ul-V<,qUP;%u86O1gHBkYkmQu(=Vg<bX&@(!Kc!/E8e`:U->lSt,t2)N3TDr"f(h67Ft,HGLHm=V*F
%9q1*hD+o-AK4+`t!/X%IOYm_E2nn`;?t_#g2156.rbL_p#DVZ1[__G`Jt^ng8MG6,er&]K0b*?a"%*=k.@TNF;XrpC`>6guK"4p!
%J%jD=Car[!KeY/a*:>lt(dCc/Jm(Dc7dTGD=B*IN'V8=8MUOHahl7HH-3hQMBtNn`s8GG)7WTl<>2j4r&o8.S(JDh[mC8]#\'HO\
%\@C4D^J<ce6,mHT."S(a^MqN`?af:<C`gVjn<2hq+G0KpU`+k/H1;9qS,kii^m#94$Z7EK?UP"W%YuB_E=`/:)UKZ>J-d(#EOG.`
%(0(h+JX!3MZM$iH\&[ZRba/`+L\"M?PBgPL5VFU-!iBO';tns&eCL:Kk%d9'I^'++Zj`ZFbquPqG-p_mgJSsfU+kBg<gK0/k6rgO
%18%hodZg8[MCkB"K5$3-?g:$<M7K)oaD!TImp"sr5V7pF-=NMK_Lk:^JO;]-!LuEtcibI]VX;CtrS&-""O33"C5J^f9!C`@dp#.A
%4)X6"mB]D//oJ,Uo?ZT]'Bh>01`N6lmdiFJe2`cp7QCRA<j`!4e;6Mo/Ej:rN<S<q#Zn92T5[<3^-+BPJe5>_),?Nlldk),T['6"
%?uS!(,:0jKD%hb]2B$3l>?4&N.]+Q6L%A..B]$;.UGtePKF0(2qPM$&E"-WV;aManCmg/XkV1rGQ=T"-#tHCO6Wk`DPt&@!FY8Gs
%$hknO8SKuQaf2NAZ'bV+;Sg!R_\*(2n>tHuY(-J/%,n^Z81AP#<KZ%R:rV_Qg^'/TDjn0f<_5Wrc.74?)'#$s)V;f+[t4+#cFan!
%bUg4T#/qLo_sC6d"a$[kW%eD?@$XT[QCbKDfS-nJUI[,PifUrnO2G*sT\1+*Q\EY$"5,IT1I9Wg-#K?G1rObNc/Ja@$9D,lHHe@"
%g<mWQDa0WuQIOhL0bWtMh]f=JoS"D32,t*E2V[/'"9CWDqt%d%!'/D_L%\0<1t)'!F#Y9X:g4(n($>)ldmQVo-_h&C1a<,r%#?.7
%G%8/`m40rNj%:Ml`6hR2fH)sFQ;?(lgGNttXHJ6nRk=@3ZT&FS:b?]L&eC'Zb$ncV(b.6BW<`La@3dX&i&-\U\-?K]R#oLBVf'$1
%gLG1Nmnb"(8ACVU!<E7fX#^<u_3j^N%Fip!80X"]<&dauZ`ju8U'5GGiLXt+07gC&gPB#8m7tQOJLhc&+VF!de"U<YP@,PASc%/-
%+,6L6&0R?,KoqC6S[AK`_!`3#SYOM*/r+;=7AXaLK*W_W!"M`WNUQ\P01Q_mPp@9),H-LT'H4!$\8m,K;";n=M;)-t6o<\4U$&&M
%Tt7>#9q[)+eH6]mbi-[<!ID/M94HAc_R#=ZdABii70lS76e?0!=O*?'QlG;dp@oQ;Fj[CDe)e/'=gDJ0FnF>GZO&$O?,*g^Wa`]>
%-=-9-q,WT5d!Pm=$#3!-^9tYMfdcjT_.Elr7mVX3!!C0CC#K(',#Zn&9hrYcHC.\Hg8[)=d><]QVrB[N\2`:<Xg9sZ(/<llqi'5-
%nW*`B;:%h0_8^,b*J,UBaH:2KnU:H272\C4-';BjBWDb^&OUB5i92t?kJZbo8g5m*[bt*$k+IGl_X_SslY1l@%Z<eH3IjiMd*p?W
%C*A'/P_/PuLeVB`GSZhk62/).X"b>KUEtqh1rV[6)st6-.o2[RJU)"S!fEoI@hf<lo1j&amJm;6Vm3'J4s,@0VPXXBb>t$<MQ2QV
%Ko)mO4/a.dqDTVYa*'Q.'sPmdS^2<5h6*G\b]-_EU2jU\(WCJ;:XKh>e>Sk0cOaRu9\WO!i^h\9&Jm[La)M]bR32VIIJT*j\71<d
%!5l7Q0MY)72%7,:ht;rVa2j->'$3@UZW&45cqV>g\0>_/0pFZk;b=pk,\V*g7*7+(&@>[2GQs5N<$WTI'[Yj[F&<Jq^j#b%%pFS-
%;!UF-6^8SjbSb"q,4#BPdI`?Pqjr*WU>c8aL.,K+:cWpC$,gTeYIna,?`A\#MMW*$Z4=,9!bBq%SpUS+El7W2N-7AW9EI%T>=G_,
%WdVJ?EsW<L->d^,<Sd:--5D`;"c:A2+)L:s'D!p)l=-IH8Dg`t7UQI7(m0HXTW%i-JHdU,Y$0g)78p%+Q%Z2HkhZ$JB9kr?(VQ!A
%"l_F67</nHcbbd:e=^sn;i,!MPsgj3K`'t>Os#rF<B?+MbWj%r1_+OH&(!>[K#K,s#2n;q)2/<7)'"@r@N"CZ@\Bim[cEuH>u/-R
%JUMHNkhcK,.@)VVF:8<$3V`q\`FK"50Qdes5i/2*79]lm$H$A1F;;t-C.Gk,H6/bi5TsbCSuJ[&L1,UAU"\@t.T1Rj0ua-B:c83m
%/*_fI;:3R*W^`pHdeBi!&JPX3\i%;&0MO>G&C/Z>`q:l=FX)j/;,iMTn&BN6Wrt2`jHV"eO4u3#aZ'\9O[*ZE[:Au'*:p-TiH$3-
%2tmpf80#_*YirH\WLbl=Jh`/>#s:`/<WA"_;`IScdjY&Z<IBut"Z)<B"4*]Y`OFSlHCfE`JdtljYDo4T1N;_iYcT)n^"'p)VkBo_
%RrlLV8sTUKN]u^'>uC8kj_2t=cQ=!pW7_<FWVVBkkg.b@/^Tr,WEEW6iC+@r[O&VZfEiq:i3mKX9>b&]MYmJF[lJbLJ5n%5Lcc@l
%TnI9u'curD`aW["GW3(sRAGt<'sAmGJ';5u"Dks`.Pd9^ngHGR@m-)&FA@MYk$EFK(a!Wo9VmHu;%*"%'-h_k^tr%=i]"6Gb##^c
%=5=T_r!'aJ'jYK\dYo:4H0XLH!RiF8#CpE"l$>t2%=<YX(H<>q4rZ=,.#WU6\/iG?X^OI(Qn)F5Oc8opp&)YUODHn-B61uR&#Kf[
%Ood$_&O,Lb`TXql#1B,N$@Qm:U.>hI3$T=*H<0)3OM?OOb>9&nijQU'n.I6XkJFQ.?t`u5`*d<sGW3A&R3dsR26S9CJ=,.jOdlM@
%f9)M<795FY-o'MTP).JAd,+\Y&/3]tM3bT-7Y`)PJZ.-6MX%FPn<4:SJ<B?F$KE2kGAgi]q.Oa$7#E1(O7YU.63KZ#FhBU??n889
%)s.nISqTj)@q]a^!B*X-;@./&YW#5X;!,`U0\$Hf0&$'LEs]3$6l;L"^MofVihZX7@a*&XPb_2>^r-UKJ\=?ti14-F9.N[F(PfVo
%'et;%^p]@>cl;"P#t#'YGQ`]9;6&V_#tmV80^rt-f/$&B_eWRMg]2?KV%PHmbpIbBPb<1.:Pn*sPsgj3K_hQ6OMjV'GpHdb)W$?;
%&T:m^mZE$/.X5-MScsU.kSsbOI!c^f8u2e"NrFL"Ipt-e6=<CsNGEPV@$2&5)*phX!oC^XK7K6=`M31I,CNWkKFVIYO+r!e2&%`A
%,u>G^N&QJ#]KV7"N"*pb:Y!AC2oj,XDgfEuB-(k=%i$o#*f"4q,hUNF!Lq1rSqJoO/LJ9Sic6HcWF51hKZh6i-;\jC:lAP9\/E60
%f@q`rDCP@LM-2P_2dM=jU&51q1S>%S,uRe][lpaQGdLEqE?YcaUQZ6YU'Wsu]sJPq];@+`Q:>a%bENJc,T[UPlKAT;5R<VnkhXbY
%EhnXG)=BKoNGunIL>.nB#.jFiI7IoL!CBk$pOYS>LF>;@IPZ8P\rM%h\Es;D;hnbc\Agq#9`Q^J"<M_TQ6eb/.iu_c]uS>B+CJ;]
%P!q8U6E/`Sa4E_grWqN2l"6>+V=<I`c;d87_d!qfc%SoNi'neh<fqYOn+@-0coYZ'!kISC=KoBLrB&eU)VY"tH[`m(BTALfBjroa
%+hWi`0<:QlL,.]S2@Xa/GoL@klWXV6#)1%7GX)?A(moe'`]!?f$mHDp:O,JqDS<n[i5Tu3C01G^XU5u(>8^*E'Y4d4)7E?Zd_WTI
%20jU"$+Ssi]((3H!TOD<?Og"'1FUh9[,?jaF//N,MgS'*!23alQ]Na"cB9pUYtu^I;>d"XT[(&Mc\Q94)3-VD#7YTEfZ9a\fO6Ps
%"K;0]&HGapW2T="Z8OLH7H"WQB)[fF/Bi*HdImWmA;+bgqS%*T0J\dQfP+j(#1NX'0#00'l%AIf?3.V;;[)M+Q3?9N6Xs!o(_F6\
%iH9Tpk9#5YFFdK3QC%Kh/6QKqh"\U%O3,dG?qopt$9cIg]`\P.)Q4Slnu?R?FMm]mj86PR-9"7,9j)9DD:,>Bb_Ke^NWZs;fbg%!
%Md\@L@g=4+%9SU?'ub]cYXf)t.Y0kFk5AXtF,4]9:nh_@U=:!d#,VVjZni,AQ'sI-k$0.i_A&D_9BX)CFA<e!<+KI/OfiVn08rT#
%3H!Oh3e1)D"0u=3Dpi-1,`[<j'U>PplUa@u50rAi"i*m\J3LO&X4T*X"(Q$WXg%_L^p=\T/@#ItI+PjJjCfqFn>9o&DQ?eD$4@R]
%%Dh"$ng"2o4C:%]n(V>m,?3&!MD6m&^_C?GW^YjrBUXK<B.?e<K>laU7jrmN)4F6F('@"B)C=aM"S.M@p4&4FBaig.3r+[J9OHe]
%SaOIG@(:9>6jIM.kR@XI_PDU8f3oDW^8N"H2kEOO^3-S416L_/=^tWA"OWn0lT>%6PT3+G83k?P'1'9R=C<4)'2td.BU'Et?Xn1#
%mM!7Sb[f_>1$]QW!]Rj^gLG4['ImoKjuh)o-oe5@Lf`&gVKEMj_p`a<]=pE42bXn0TTh61b;<4rWE$V?QKV\^!rYd0XPLtln9@?f
%gb8qgKEY!#;$k/Y1[G&bHc&Y]b$GOhSL_qA74Mjk!K:HQJ3`G:g6b2?\!&;**FOI_=D(*mb77."]=rER0KbEY\4L1V4q*66U<mF7
%#G'fh@jk/j4CV,#5eMMGNA_7&I,udFAJPV8?"O?N-DSCnjR.0V'j1Ss^@0fdD`Eu8/gZO%L*`050[T((nZ%q?/P4:uce"0Fqt:l^
%#ZW_[@W%YN.:o/Iao":E3DoN[GZa2$-<LXN[]>;_<Ec/;5U7mX_OcX_cF?IG(E"2[PnncMGjcaCSTu`@-f6%2\-@,hbfS*`P9uG=
%`qKTr@23]pF?EjlS-?<q?/I\A(n!p9m'O`'T?qk"9qK=4g)Z\A$;"IRP(:2fBUAhmM=q)TqS_$"O'gooV6sa!;9)1MdXjoS^l@gY
%p)"bYKgm%g3+=Yj2$1VaY^n=`G7tTs)kO2Oht=,A[o&T-#/tiNWEMPqrZ,4eksk@h8fNK-'1dh[opQ"'[oCJ(@_bN:UP)@,5b2od
%SpD1HbE#Rl03.7MqeK`N"%aI2XX]:c1HB`^'UdGdCE%ASK@,(TJ&;Pq8!kds%b&S#[f>"%B]#*.Lg(gPV`=s-%B,8+arh$<!a]7N
%`=.$E.aGIZ_r=7tRMDW+IT-E1UCFjmDgQYsMTJoHe.ROkrq5>,";E-g2nnb<Lm0"@jC6,N4q)b,jTgJQ2Dk!QBjcJfZ1(=U)?JTP
%n,#%Qis5$T%F]VZ-oNqDI9'=r^S?]?cId@b&JH-W]i;sTM]C1dj$P`9+57WjN<GD9i&M+U/oKOTNp.u)/AGMS!:p3!JnH2#Ga[e<
%Pp1FZFjF>%_UlPWc7lLdL<u=s'6<uH3p$PZ#:2D=EmkJA4X3(1'V=G(i&UC6>pcE-P6lk<Iq%F,OGppW<6YbF0ZPj3Hh:^()MGf`
%BbDb]Vdijs%>8Kuq*Z[KNUM5JjbT9Y1-HXR%!<?&L7tPf19Ur))j6:>%(7,4pXIBK&R')W`HW#,C0<[0o=;?hT/g$K.#Z;3LG,!f
%_4f=LPe>]hK8g"s8ROOb].S!X$T[dqEeNI'<TKITn5UAE.u]N0GfS+Ren)um0_H7e@Mg)+B$1=:(hde(`&@8GWo?S,ZbeOhi+\4*
%*j;PI+q-nK9W!8IQs`Rc7SI-m)<lHJE5E?K1c3<SYN$dMe)q(8Nk&BYm$l17K8K46V$K#on#7*K3+Ioa`3XlhqI.eR)lO9_kS*K_
%B**sFJTg(#SpE+H9^'`oe/#=$bi4)u]?2h0Q:2r2\pPS5;d=?jJH0\#8L#Ms)%#qu^i'jo>g0Pk6KEoU#b]V?fG.*IDu#14a;@Xq
%_ar0)Q6.E2[;AT$LH9quA2o)kUSsu*@8^;/(<:+GZbeCdi+\4(?KZe4,\Z%#l>KM!5Uj*o@\h*2]d%sO$;siN4O"GX+bm.RP$qj<
%.5/J%%8#+R!fE.o)rLD>9+dG\s0X8*K(C+7.D<jJ.)Np\1/3'-P(perj85Eo3ANqe9j(.uF?7+///,r>?7`^k?lB$5+H?QH/9*4M
%feO._*&\F#-@t>*m(0]P0-nXM9+i7PVnfW]N,T.]D_NA8aubC1[KFbnCZEM:l2dPfaE0b9-Ct_!H.K?u3BtsdX>%m2Ga`-9a(NOp
%6)@h`XYdS5Qj@gZ9:)%g7_50+SDYpg3_l3?_J&cQ32hlbq@P-;6d!tjlA<l?)rL8:M\2C43p/d0<q3T*&2$WgaCC\0!KD=<%0Q";
%pH8+8A;&6t6*VbQ0FaXm's-0*f3.SC8Rpc=,EJU(ppQM\3)\i7@BnHU+IE:TPHa*,k.M<M5:f2r8mAAqS-!2Ln-Up?K1o(DiR=0?
%^_okj9n58)f4FYk'6?S#@]T8RL<P*0deBgsbRo)gj.Nk\5C*f_M!BaqBbp+XMCu/&)YaG?bmI>WbYO9YF7EBJ56+D6<(pMtH,29,
%M2<tZ';5[j[d0oZ+uj"j,(Y8]Bd$G`>S'@+=dk!q!C9'q]5ddE]`]4HnRbU6CLgQ2MY(PLF;kie"eM""jdHL5L5gp<]dV0:o!f92
%`"P`ET1R[LEHD,_8<;/[X^@Db"^*%_U*;@4pfGAs79`,)R)/]N@KeIE![i2dSQ0NL\/7#tCD^beM="Fsf8le$)'5P5G")mg.cO-]
%F(sCoGbYQ5@6cWQS#%Ei-EX+u-^k%cH#tci1c<Y$4ITblIEbr'3dBKQ?_i\cEG3o:R6[DGr<UrV;'K/d5f$uX0ubu`X@:6O0Y=WT
%<d:kf4WXS754'(!"2,ROf9#7"7QQhP)^g&_KSG9&DiU;<L+XpB!Yt;sZQNhA+`:]H6T9n!CC-Z1JO.Zu,#Uk[n<T;jENQ65YkT+>
%IPHuJ%]/A]=H&VM`(aD&;9bmQER9Og\*a]kj0u8U!+.\1AN$9he'k%KQfLf':S3Ik;43d).>X0XO,$?,^c<$sLJ$;4WTJ>^@DO]4
%e";FO$hM^]6u*16ZC$6F/>1-CHIpcU)&7^KK0<\&^53=hh"ms<;Ia!`^F3N\NE8YY?X]AkFMsD=VCBYeYS$CZ$3<IV_eZD`0TrB7
%A,85`Ahl`<R0mVF,*!VPMb%W$@6.>j3>?8Y/&&nE;_(]U$DV'bW<p8#Qn?JETY[+^5u`X`qnPh:??,sh)\@l9:aRq=S@U&IC7&/U
%_hd:5Z!qtNdDMk6/6OWc]9_u,b\TT6\gCJ\o.iRnMXPs/j;u+lc<..jC:s3s4go+X\seJNO9/;Zf*1t$aQEfMkOQq`J;psc5$?][
%Tt]7,:g`VQW3>o9e5s6slDsk'p!nMKqJ*csH2SL5rTY1/U<#Wl_m_9qnh%bDb[0GL7jV+6'7N'&R=UOCiIB^5qh5B07FtKrZ+4[r
%]T0sUA?(hb/9AI.#-9Rt-4A^/2/1ZMmPN0(DhKP6GV5<@F!2C9"(,#Tn4GAP$hZ4-::RFm^`-m"kXpV.bp"pZED0S!;M(6aj!G\1
%>;H`-Y@=,<Ol63Y&o+n`P`&iFj1C]=8\0-u92S[g[0J0NCYPTHX@$<.THd1drPD(begS5B6*^^d.<<t]`)08QT$FuSKlTOS6+;P1
%VLb+rg`.>[EDqk`j4T1IQgNkkK8*Pl)Ve](SH$:9r(DI8kRRpkL684*Ye^2<`H4rc=%/D2W$K4s?5ki;mkh2;+*4Cj98TNQ)AO]m
%6>pK+VD[5Bdo:Sm7&:4lTgL=JV)I+M1(6C2-f3-(Hu;_=D,B;9R@P8;?bt5SFGuka"WRb5L".I'JpUN!;c!M('To'/;o!Ou*t-X%
%*dUAHe5/[YX')!_L1^O;Tj\W($>'q`pV\Z'`6DR[[I5un'L-n5Uh)H;q@5J_l09q=iMl9fVpH+(J2bjmdjoAmVEj1^e@Qp6#$=1.
%mg3[%*Z<"B.s4bh@>TAQ)N-T[&q_6DWA6C?p7N?S=W]]0&2=_0*H5G\d?O-3%<DHb%"*SEp,!urhl$36e7fa'F40A<2LJ[0$c36%
%FCD^&YHu1"KOD/MOHOE1=:8SPB]5>)@#EF.[$XkC1(@q);?@aE/OhMl7L:@"9Nb3<JpM<,4ho4-np?1rp2e/Rq\eCor>b@XDM._!
%5=9h+T-M)(Y@(WD`U2h&2tDh<f`P[YadtpMH5cn<<Y1-0^Df\0`f9A3XP3C3k>1%>Ccld@Y:.E-O7<;\.;X]_m7n_d!F&L%(iXA=
%c<X3"!qq5b<6n!HEoK/a<\\^\9nYunY=\!db6[/HGd:#t!dAAf64<>9Y=KEh["mZ8>/I_,gVIkk4b5'#nW-O"'@2]u3*.)P)eOe%
%2#mr8XmN3%o2(/en_10`MgLopG0UYA2EdG#Hb9S/Km:@8!T]"6n)PEGnTdm[GMeTkgVB<sRd]_\;b%?QfJ5=0Z:ha6O9/,%'"'DF
%!>k`R-@Em"RNOan_=VT&q'IbN.HYoL%8.;a0c0r"n17e0:+UG(:b'DQ<L(?.+1@2>N9GNL(X!M@1.+N]b7B,+i?OGghn((n5Xo#>
%EN\p:YBu4XIaj@Li:2jm*/H[E82tOD4.:se_AGK(OSZ,^.H1eO]]\Bn1":kiE*N'`<66mbdKafZ@k3EB+ojt(O(o*#HRMclIk*<R
%'5riY9mJ0r9pLRSi/1L"\7UYO,2L^7&4)hXeAc^B1c<&f=#fpaY.--X_5nI<%dZP='13(X:*.(Y`H*J"!d72Qap'"d<0Zt;#9oU+
%`@M\El1'[Kq0?36aZpN)@!^>>P];@cf<C3b&)*KO)eVtMX;J8lck@8Td&q'>Q1,:&B;R6(XWUg;+L"F9J7kQPO\b)=)P1&7RPu=H
%L$&Qm`1V=erA6ba4]e@.*f'aU..EkGpDQ6XLMoXdPS?a-V^DV%3Bb99#q7Ee-&NL8M,+.&W[Wgn37>`#Niu+bQ)Q/oAb1MgDSW<l
%@#"+,68M<ne+bVmXoW-F\;t'-atcWpM3gJQW0A>R`_su*.;,$8;h/`li8k$g,I!,HA;5Q$Qi[tCgU)a:CA9>8%0YS$1,&)Y7[,YL
%1cH/Q=Ol[6(<_4IMN$>F5nX4A<"gq"6(*GNf5$BW2UUSC+]^+VSi(nL&$np^rgV&4$mq2e2T=W4QDp7;B;gciMAe<)pl!*jQ0sZR
%)/P3sFp_Q*_TIapTH0k]1u?(k+usZ5")eu2Hn*jrA'0?K@[J(ra(2,SGTh^4S`-nbW!6t7_ocGZni9%AW\Iu..QoRA>Qj[7C+Z6=
%N`/7a:bGL-/f6m`M%14l9HYEP62lE^,pq(sI/\]N*%7Xq#,O6F'iBpY)i?lM@%AC87N+%r2+c2U]!._[HpIePK?>kkSQCOVG0@1[
%hqUW#Gc7XEGlr%jV'6,\6kMS&jEY'Ie7GUUa/O>!;,P1c9,FlG,:@RcVJ'Jc!a-;Q5lnCqZ96rBr"UpTiO<>s!L_+&]m-rFJhS$^
%'q$0X"$@#>MNQo:_>pDN6UdlHLDgtV!\bI[*hWpWIQf[&JY]?V^DNsf?6KOW)O1Bj_6?Y%1jt/gDi`fc$rB>0O3^Io]&Z$R61:G&
%Mfu\*aN&`pn"?3Wo2\hiLdSG,:T786APG-fn;/oJ=C\:g)g80j[u-h%Ofq/A29qN;C4Sj+Z3ZkP\*^F;YY,;h32Vu5h\O02B&I71
%(+LZ!o_CG$^GP"9?u>[?H:9PB)G\6oP-p5sZVc"f+uBA6,'rk%0<9r\)JWhuZmrf3M:rmY`(BEn([a0.ULgJlA)5"W,oPP@pLFml
%2Gp:7WaE]l'nBjV_Gfs?"DeDpdcFuV#&8)M(f]Hc]1hgR-37Eh_(4$(l1Z?Aq/K7?>DQ;gT:EnkSVG:;\jFZ\.[kUu"=FW5;DEdT
%Un@t3('MX!))mUpV^T&H<E-."*)r]oG^G[9-U4U`?:_ki(epWj.3ag96,<WaJf]M5b%7G"Mo"=-<0:8;;#Kg%"#3'e"CdrGKNXNo
%I+;Mu+D7!A`jnUu<*&U[PGL6<<B"Rm0G;uZYKS[seb#202Rh$[^n%C]CMKTfjBV%@<?oBab=Fq<1(?)bO2=T'122QfVRCla(V-iN
%M*0sU+\<!;8ph9?mRpi%"LkkLMYOseL5mBX[rq`D<kOg;n/N?XJ<Z`gl8tX@ThV]L=C*_D2Fbl`WGEK=)&+#N$;2r4)TaZRh][Uj
%<2L5]^bYNaa<DeYF@tg<X_8!pQ-*p.H"@sp,q?7kZD_TATb33[3`gth#%]9qVQgQfj'J.*/gW&):i^nD"C<MY>!kPl9g27h:^P,l
%?j\BFI^B.<Lt3uL1ajQP]!D#`AoDT"JY[,<P91Q0:WiE7JC69KDd0Jo*eBBgiJY@i)/WT?n'b\`#u**IeX"Ma?u-EE+6XE+YN`=2
%*b.hm,:n)a$U1',8U&WOWc>"/)<e/!.#G(08"&H!_D4Jk^+r'4pA?\F$'?Sg>SD0rdF)\V(i6C7>IGq9n@"g&X`:OHGcn8AeaSk*
%3\X7B0iQGe"[sp;&u?X\Wa)JrGc9YteAQQ<e7;6C?8.*#"j8*7$qN1bO3$5o6=5p*3(DNtp;fls&$UZ>.'P!JGX2jG0F[VJ>g2-2
%02,Vaj-I(A8sIZM$k")_\Gad``p>t'=eno)M?YZJ"S$=hi)jPR<a/:kk(FI@d"u5>!X#f-Sa8QUk^uND#.4Lb*cM/I>Wtdgj)AK)
%QoU@%^5ogcd)uX4W[:F^F?lQ_UIS_iSdf3hq"tC,W(PPcBI=+$?NSV$0S=U]5J`-oToZISa>1<O:HCC-oPEMn`FNZQ#.FVJZpoeF
%VP7$$`k!_=m$qT/KplMlIQSmSBqW5'?&r'c%H#aWUS;E>=s^!(7%3-\g4ZcY83pBl7^BQ`q3pc#n4!Ip>n]h'0V_It0^Q2e(L2N<
%>+"RA-a+*q#PmUq6`MkWOfZii%ja]&5m8INi>E!:jsG6Q,ATQ\I?#on.-$cG[o>JS5W:HtB&)#%nYIk%PX%BJ\BpZnU)5d!l%'`d
%D`^d`.a&YA^+9qu"N;kNCq(s.]W)g*P7-9@2nj**B%];rgglulb#Ir`@i;5\6:u$,`H]:^/VP)o54%QcMWZh-B+sQfA4RDe`<*\u
%DBBhd,G:eAF,'4XeAA+TYZ*Ip_CUr)QkkAmYK!s.1/NCIh)\eW/*-"%Fbsc(QC<X=%X+r4>@6Hk@H=kK/`9h68,sV?0as6FP3ii<
%<2rKM02d@u:mPBPL@+0-!c!C[[:$GKZ:?[+msq*(l8$`5:btI<kkcDk#e"p"N"'^TA"Ea,@$CJk@\=B2Tp-u#(n=&:SPU3hR<89@
%C(Af:pB)ZLH?KDt9Z7YcU+^n>'*/IUC%sTC4jmC**2'!6K!JcF6$$u,??8+<VMq0eoO'^Gd0SO:cICjVbQ$r"T`JQ\M&Y_>-?(&&
%;$n*YMU3roaY/rnWY^J#T`DO#9Z:9]SRDq_?c/,qGcL+EIiM8ITsB4cStt_nQaJg>?RdDrJs&X?q,<E"8;Cb7Cb8d:<+$>:W]aT%
%++9t)\*3;n7I[MEdC'H!Zpq6QAh&%;@/2Zs[*G<Qp6o?c@ZEE!"(T`&gB(5+PMkMh>1co*nY$*0d3LI3q=b^1&>7q/#TrQr$Y-1_
%MD^#=6spl:7SoKr=DjqY@_N*X'uSm+r0grQoYRAgM$sl[^*.p($tVT5H5$d:AYJjQ3'@A&-4#fi5HHc@`-Mc:denkDk]J(q1/bpl
%p+p4:MbGV7Zmd@R3tW`J'@)5.,V9Gd^gp)*":3eP%@7Z=Dje(s$QfL$/hfjI08BZWQi_f"^+hQ<-<u9.AlCP!ClL)Nj-ubabqZ"r
%=:2Df<,lNNTuYTgULe]>*7GlP28&>9%j]=b'9^W=\P%er,GD:VUjOLOUJTVtjM.1prKKi>*`!)BLg>'C*$TFXjrVQDKL8G!)8a=M
%1e7A8808eL/38V!PW$D5X"*,s6_qpfMAp;ja/g-M&KWAL$YC)0pEo>dQQt0-#UM7$:t[Ph^I-WP\^aUIfa?]oB)Ytb/uDKn-(',]
%]:FeCEUcM.\1u^Fr^)27KV;SjhDEcg4kDajg*1*Mrm$6:iuKs=V[X.\bC[h=NQ&9$UYd"[a0[FM`8l#,APnhmI>uTV7(8`7MUq^7
%PV%7uhX`Vh]&u/=AU)ss!o?8'6!.nX2@Z(aNd+FjR^2+j_I,&s_8Bj"Z?/3gN]*fN*8?L4'U/bW$C]Gn]uG(40YfX]e!0G1PssZ'
%Klp9I>)<_ZdFsa6V<d49!WkjI2H#8q7,l9FBTA.OaIk!1!B$G/Z\H4&%"a1C7a"c).h4GWYUUCL95(,o/=9;]gmbr].rQ]kV^g:R
%OVrkqL1-_NeM8rmZ?-AunC;A=3/H[`(l)'9>Bk[0)$Xam,.:`7\*stTeJI`[VFAM2FM*:)O>I3M_UL7t+=KRAf,S[C@NnO!7n/VP
%U"O[MrFsl2DlFS,64-+G]pqa*C`)H:?RMB]O%Et7#%k3-B,)ar/sZnN%@,o*YY\n`k,M8J]`T@lK1XcJa1*&8*7T$m>(Ua=L-",B
%^joZI15makbsjVb-LQl[N?Vk?6ZWR!%7<:B#-Otp(fDiJ,g[^I`s9uo7kmV\S8/dH@MqZnR`Z>%S&I/5ZpSC^^H&uY2cLN2-8[BF
%;trA=)8c8^TbZTJ`DlK/l!B6Ne+>F)Wp'4(]1]L"\BbG<%1W9l:i(sTMe+5hDW5FL(9&RA1)p2g28?\'$jaZ7L64+)E+a:>)&h>N
%=$F9r)GGC]nBB@irKh8!':k#JSd\sEoT":'(o)RXL)QQp<!Em^'RYcK&Ge"2eKfmd11"@=?``"2DKnOIC9lKbLMH?U<#FaI4[Xfb
%7m(E1E??\$k$.F]b@4,LrMj1b3adR["eib0KCEhf@dL16#Da*N!rF'mO=f;t[s^IGXuR0YmMP?Q)q@K7Q>$Uc";X;pa$;^Ii'7HP
%1&S<_]oKL?IqE>,jSq!^_Sf[f10GYZl#"_F(a,\PDN2MU1b,7#ISltXBZ^-_28?\QNgQN?-AFNZR7.f`ASAj,0W8K<0R%n2L=sH1
%j[P>/'2OF#+mTj<Cc`D:Lc5r_"rUEC"r&N/<0bba,A"G.;B72DC^S@BoE[##D_24'Fd\?o-I+KG$\^qh\RYQO:b=Emc9H9BYme9%
%K(%,B4/cq1\gXuV\sc]ZQVJs!&F\6(1>/Ut'sW!%qG>D/eAT.P/@P$TM-#G;!/aG^,TeY5ajt!4YLGXaNqCA.O]*Va1..h8i6NJ<
%O!_+]k+c@lMW$Sf?si`K>*`ZC)>Z>"i&NbB6@:)4>T]h8Ze$nmTcki2epRUYdd!rO$[dudUdX0`pVp"+Mo?l;\3c3A@\]/;P!!32
%Io`aNGWn_8^J$=(/@Oa^1/_,kZNhs9$.E!'DTL`ike.Z]#V@!;S'g=>]LOBSa&!t)!K%(?GYi3cGRG:V9\b<<"LTQoXM=ig6.eJk
%!F4IlA;M"I2g7So@[r=EM%#D?X6KUX-M.NUV/qB(@t+7nL-bBr3&=HK(7qKP:5oZTmVAu#/n8H\"D.(sPQ?H`"io0(),pf0,-pu!
%TAOB#9S]eY@pR)cWcjg8'+n'ro#!u^R4iq5;Tsdje>ZOeh]Q63[l*tV#tE09J2aC%nq9Xs-dkH7@,P8_E1--@Jj_%N@?7L?DK:OS
%;4_7B@9rD-)`ALD$>0#bp^jBGbi^XJO=tj$#.%/NL$0FN//De43PG?r2a2qR3(%(C+=hm!NV``P+7TPl6&$Er)<d5/rZp"id;<rO
%3u!qqb7l"1jo;f6Aj)S/a*GBH_#I4i"EZH;g_\hp%2l%jZ=S:^"iE#4*ucJblCg257-NMYT8:]NbBKt!37Tmher0_C2:5d&P:+sa
%hKT.$ieJhGHjVl-2+iM&Lc91lRb77q*>)ET;fl6'H]S\K56T'iMB:%pVS6TCc0&N#lLpH'R8mK+Rsr^1hQ!/0;ZfQ2S&(qoDJ_eD
%#=[O0L!e5P!Z9t+>+<#^JK+!KfLa7I]QrKl[?jUBedDkoZcj)?8I*?HUV$Zm'N7+(?\+.GXiFo#r4!-iK5uh',;KiQ<BUdU'1qMU
%_WIf:(=#@=Ro=;>Ii+n*$(:#8V8]c7H@&kuVmu"A5!4sr;\BMq]mO)Qi&KmcRWe,LY\pADopG_6]h+]N#AtmSm]"1>J-@?Ci_$tp
%<gn92`-"NIM5u@,K!uNkCrn2..BNr<1,6LVeBZV$*d2aaj=[mP(/^5kfTOp6)n'07s0P<::D+8o>/E-&qN0uC$Pa`af;RjTk@eKi
%b=VE"BY$hIOF4^DJ=L.bP>oRO.Llfd72DTO4iub1ZfY1T,F:#r&k3?]ka"JQ<C,Z-\$:T`CNn\\(;S]>F5b7J66)k?r>N-QrF1Yd
%Sh>pn&0-A6MD;c!VXR<O0hrFnO)a#L7/A>'7F]0,r6<rP!M#?u9N'Rb-%T;B$'FVn+J+In":5I8X>Mqh\':5TEQ,TSJ_^qT:3;rU
%@gBI7>:_'3-[NR#)Qh*-UJr#?J3p/Mg2mhZ4Ignib'YDF>=D\Vp0s(7100EOKgMP-=RoO0*"*`>'S]36@6!*Y-3U0aL&-_G]u:-8
%Bq_!*&k&nnla5Ke!acP6Ir]Pq1uV2d;TB4(W4aqm0;o@an[eIV3J#^@jds1)gm=MN5f,2E.KG*O+$M5qD+0R_c%upkXRe$bL,pG-
%/jp7=Rn0Gs8;"bg&&4(+c^u]>5\+CXMl\NPQ\`L*$.qhpq)-_,+=u,R_7!Ri2j*)9P&O,Y&;(\:65gNW3EE%(:ISN'!HbLh6'iE2
%PlQIN#E[abJTQ:FI^+E\\N(M6./A+A>L:^DaXDh`"F5JS\1]e%%0[7qLC`<HQAIE9)?*&+@U1dSOVL4MP0aila3poj(ZHdRXl_dm
%C`<1bd.0aPbAGA6E9Qj2[t%LV8Jctjo>Jm?+B1-UIfOjN`HWd-4;17bT&L5iJX4rM5h%oHa-W'i3@8=<B,`fK]Omsm)XS]@&S.MC
%6Yt(T4c,PAEEE.ppNGgmPQWAMXo]#MCS<JQ/h;+Qp:M'Z$1T$:Gb'ILelYa*E)M\fDVe^F3CF]fPlrg>(Pu>68Jjl7]G`sgBH@41
%EI=ae@Et8,[T\TPIJ>8QB_lP:,`"%Xm\d.iCf^s-]&_D(hDWnM`48RH1(bR=j/;pU*X`3WK-KI6AhW0SoiWI/c<J8Sl:JlkEH/r3
%"`>j"6fZL1^^ZA^V^*Rh,W<@sf;:]Nc1t'RJK43:4c7sRCoEF>)UGMr=4?Yj)J"HA81Tpbe\B3*/sl<r]CO[7^:+!8A.310D=H]6
%!h1ZI4#5hUPYKq#:ddPWfg`Zma/om:cLf+(r!H5&s%aU]QQ&*q;$kh()Q;m7LmlZq,]-I%*SEOlp:++,2t80$5V2p3.1RaPqN,^9
%R1Xq?R^XpXI%h0fn4@&2d8qiJ%0!@XFt#lA9%d_td&QqcXa,J=I'If%pkWcm5XQplol1"i)gE`or:><fS@dInj-r`Nl]F&sSY+0Y
%S&QW0eSs;i[$R>urO'ZnP8&Xc9hlb]XnFBeLuas94'#Nr',bT=Xtb;I@JKnuf+M,?-)@:`SF"^W$jB@Q^rPSh1\A^HR;D39epMZ>
%[a*=sVM%n.iR"8mFT1^[5>u*GMT\s-Z<aU*+pkTIjQ![<CW_7+JKC8,h/kU1Q6e$=WB#eSZa'`tIZPk]Do,e$P&>Y3]P3RH4kc@N
%cJ,LnD\DKOp2K6C-G00Kf03D9#u_PudRpo<J0Q41c0dJ1DG*A+=9+^m@tIA3@rKO4gBsT^prdt_9:UfM.RtB8_?oY_2kPB4LGtW;
%f:g`BFoAbO/q"Di>4lQ4LN]E`GJF-FJci0UpU7s]n\L1[,+9G*%MI\U)4m=+0:%B!F5a"=D7LR]r'jT6Zt,*Y<UA*\%PeGoJlAT0
%`!900p2?D*I?.EMlhkU*qXPuL<C^C;G!.n-cJSWdB<.1"dhMcuL5%U!$]^_AVhR-M$76rTTcs972+-SnX0P#MLGR&aK`u.Q1XHXV
%<;(ThmMcsWSts8N2OS]#CHXaC>MFK-eY_JuF_?ooIJ9e7.3\gnk\eJ+=T0?]'PYRJL.*>FG`rS8[SG/5[3#0chaL_=$ZcDbmMtZh
%UtEAO%)Xca;sTqZ]u@m92VHZRXgRm#[bUfO*_\NO;qgp-+?P#Gk:fbE6;[mQ3[^q@0EVDh>R1+>9*XN(M%+@)nP_f"AJ6rN?U^lZ
%.Mtka:cKO,17[^=Sst?]'2H[*MbLSFO>UBn\#Ie7iEqD?4m[O&Q^tkgeP?p_$#teV#31#8Lbtd__MCS3;+#[W@q9@P8D.b'%%,$C
%Ca^*--R8]e)>nUA00.,CKS_.,BJ/OL3?6mdZ<`Nmq<Ilo^>?dZbkRb%BJ2Gsql?>@>_Gt[hIk-:cBdY?OFUsIO!/i%-Gue0Gf80\
%.)!u`gm1`<,5Tsf^$+QE$Ah/ZGG;r#<UX*!&R.K6aCJM1[cXpbZh\oE;if(p5<IQob<JYtV`:Wpm84"kfG;JQ-hVer,8rLd))<8,
%]OXk.OKj\Ei?4]uNms&;.&Gk51_)JZbG!=C2%Po28pD;Mf)Y0%/-N(:/rU"m$8TWLNNOjsj5SJuLLK:J10pD1WBs`iQ7#RR&Yp$c
%P)WoR$"Lk1\4FV(kq8H7;B*Z*k1@jSVink)`e@K+DhJlp(e[h51i""4#9Ac):8V!QnPjgN0Yj4ro?`pbe/i/J[=qd"el60V5j/28
%]ETO\$sN9"5oYTlLg)Akp:UNq7hH(694ML!W3"$%j^-DRciC8jMK"lR8aHd.63n.X7[+/QJHUUWn%BW\##JRh#nDC"*=<DqN=qA<
%nX_riRTON><uW,#3fZT?Vb+ms,ke9'bt`=]P!C_4aC6kNRY7`jHg,:M!b8fDa(OsO2;>\VC+6(?;NsR?Q@Dfcd(,=]FrTN^Ot30J
%oEhHf.tL!_CJ:?l:nsd)6gG+kH"`-2o>acT&)NZc=Pqr6ZmVR&7Q)S6)7^6bT4O]L:u+E"*aTltO/ts6H[%R?P-W^rLP?uQ=?%ji
%3Km)_Bm/9OjS'#mKSbUdPm4uI9[AMU+Wcb+J]3qFTf:1>'D#_J.l/*VM^>&"?Weh,&EU&W+$>[a6BNbjMeu7uCM_ErU%k+P8"LBL
%ar2!0Z]8PE)5u[p7kEk%@@6RWE5l_q_)/H^7!1]7A-1YijsG7O^OJBZ>+"_'pY"D`N"\oi#H8'(Pj9cDj*s4qTo]&hT?U,(/30uA
%TdQ*di\P#@1"a]e!q't@M%34"Q!]l^iZ$r-AV/u00P>XL/:ImYdc_qk<%+2m85`Fhd7mN_r7hStY13EVl9a_$hHE4nY+(Bm!2*Oe
%4*="!N,ujss!iWj0#fIW2/!2`64J>j*b1=$/@\QB%:t#/0UNf]/m2SXOY'mSGp\:Z_GVZb^At]OnKP#t'Gm\la^Oa%moK]T.u21T
%n+ObY:-k"9olNAJ)h8iHnkI);dZtAG";HVb=kBYrF0^f4&CT<J4N.@TC_):+iggi]XhME*BT/S2QB"*4V7b(/]Oc)?Z3Ps7qJ>0_
%6MlLkr>[">ClEA!PNA7,4TDXg6S_Vud'bKa'GjY<XE;742QG[iJh@GigG!V[OVHcqdJL/.PE[n<iT$;@H7p3Bj%:]R`14P6D6Q0D
%N7QKM[^XH"=l^!Cr2NolMHi+..)L[Ca<[_Z?pn,\='Xo7WNBW=Yb4P!'+78tC`dbY&<nuFZ!O1TIO3aW,cJph!N>`Vc!LZ86j7,)
%$P8*s-oPVT:4/@iLM!WL1D;Z=>BiS*?V4gC9a*#J^Js<9H\e,(#>5RX4-K`Hag?D_%*NKF2fWZVHEhs1n4Kgf]fe]jBRPTXeAZ83
%k@uGb?*[Y4)eXg9G:W+C(ACXe@M3OPC5n+=&*pVWZKMQ5mmWGO4l#X';3Q/A(>O7AafQO2Wo]<f6GAT\pfSU<Z"m@-Kea^fGa8ZA
%h3q-1,a+J:`e2]((aV,AI!dA%@4RfK"Q^n471aZE>M9Ft"Y\taRn?E$9n/J2@Ys;0*ZZ89>jp9?1PMJjemk8V0\3#?,]@OC'uPP*
%&r;`iZpnG;:h77I7-Z[f*Fu+q0eL9IBdFF!Uf3+Y]\tV+aV*Nneb[PE@_-]Pe<DXfg[hM]g]E+[(^pMJ6.IW;0LbLjOa:qVJ22=R
%eV)/:dG-lr$=;IPr"mRa*(o)BVRdEo=c]'=J$$te@*n&OM466A)*l>-@\og["H^#N,]./3o./FU)SZr^2P1:W0]M<VqPe/4,3tuo
%M-5Y3LFhM&p0L*ff:J;\r,-$tm(Fc?C6C:Wjtj[#/]IU9MI(0XYRD31!5NM&@SS\TcK7RN1to&PUDQ`@/PDIWbs&i7,<TDqM?AK8
%#)[$9PS)JaMTHYkj1>1m^fF%F_(.HB'sL[O=Upmq%D+P:?-$b8[\YJJ+_&_;ToDF*HKcXFDI2RY1(.*N1ICD&Ata:%2>FD8r9#Lj
%rQ<4`I7Hb4"T7TONgf/kn1Q`@TQO]'K/t?rj)2us;TAbE&4o0TgG10U&\kJ4n&UY2GlpJhTtrr>Shdi(Q:s4ljJ.Q=@LjBpW`1BU
%Hf;:]C.1r<L;Z,`Z0!>Gk1Ck,`E(N,n]Zl%<g(l,__!5O>j@69+$r-d)7VY)E@Z!'qBUmj[qfM(Zr(;cGk4tkNT5pkR2E55AHs;Q
%2%iCnS2tH`FLu;(ECog2nm^lfNa+]0T`rJD/p?&$.QQ]udo5/BjNA=\EQF&R^5?7t*j&#&aF29d5Y>-c*)B,IMih3q[`(l-`I*1b
%9:;c;if1"[,i_S%AXj'Wm;Rs@EF5>lWsNl#n?m$(9CBg^KqW(&9iN\KWZ.8;;'`CrX4Kb&!Y.!V98bhoX?#'LBrNlIA`TinE0;O"
%KR[NS0cssoi</UsDU+Z^Hn"AU-JS47Ra9::Q?PgU'QBHg_kcs=00=[\CCboNat!rqZ;b!_H6taD8XH_]Mr-qPjbla`A;qmPc%r_p
%4mO;8e!J$W`Y!NY_/7"WG\SjAQf[_69t#1XCHf@Z>HXdt-Lt-B1@8;,2VHoQ^\YJZVF-06jX6l9QqX#Vl`D=RH$VJF#1Qa1O*AhL
%!Z??"`$3L<Na)%rI9DiVk9.YM`Q`dHSt%Ekh2=t6l]3op?,%s%ja7T)9$qN[Is/-hQbWC-_E$=sSenfb0E=@;K3k5mK&2,R$9+t8
%c'jj<B"g+JW=hT"(6V*s@i(40G*&ECMmd_@?#eQ*j*OI3rRnTM?(]C/73%Y?KPhgaaj+8mlK9YdmF\0n'7JW_#o8\R`6fCEU(a%P
%TW(r[rRIE'%&5Q'TuOJO`!`kukG5+:h"Q0Kclg0KT:1Co"_k`$djEgqABe3=DsL6H2b!A*Y56*%d9_"qp?uY&SfRL#L)\@6GZRKm
%lHT`e9AM;Tm#P=@-r>]<Yd]q9Jnq!KAfN:sY$[sC<a8,R06UR-QqkoN-M*@Pq2Q`,&Jl8jHS+G<3DBh<%q-&JRBYlGLXgd:+$`TI
%+$GrKJ!mh*R)2\uHD24n.Ztp]b4@<4[7ob4mCd>)Ck1_ElF_Dk"G&3k7YA32]n3ctJ]46lPo<-Cr699V7NCoV@Ys7*^70op[(^O_
%Ef5SKC1_jO)b_LAWL7N&4bH',&pLM0>uA\^jT55+Wf*R_K7uQAjM!*BA$&9.X*U('ae%7%DW9fc2VS.m]dda^p@\nUFP4p7[K+GM
%L#>S1l=*Ys,\b3LgR"$T:ZbkqOoe]DEMVe2ihlN^P(4X?o,t)J8-Ze1'hsS;/eUBNNA+n#'UR@u]dsN=\VcWp.8)"j_I__&^][g]
%L5rcGbom:`-B&Uc=EYH?n?>:qrSHV"g(=lC8QS?jRPd4AQapA&\2n*hPi+`'-\jesb8*to2s[mCp7eju/`\$J/\=$5$\m(Q;>opZ
%Re3uL?J'R5+JZH0nA%Geie0j'gnQI]F&NEQPJo3<P20:HXd"6<$V=hH+;]oBjM_8Cp*.WmoN';?'8@ech!I7oB^<spHM79FgfjQG
%nn$EndT^WJdJ9hM]?ZLl.>iP(%GOsW\.SM##\YS"WkfpDNT7D1pKD>^Y\YST8c4(V_mJ>^rgKF*36Ge'*1E&Tn#'3s?EqV\Y,nM,
%cfPnhG=YRQ/Q$>4fum,tr9C0cJe1)0#udt-.E_#\LM;Ec4D?'XP>Nu0:QMW'Up-OeP9VBd97W/q>:VlS=h]5#&9*IN*h-(tQ!8A)
%VG4MlBPTdnD_]<.-GV9\WGF`OA9Zr1l=Z#r>Q!17c:JuC,&j$o8WfJH3),,d>KP*kXjfcuB/Y-,go?lKPA@[K.HC$QbHe"ISXYhD
%,F@<]U.r(=BPT4`^FcR$^5%QlbBW@!-9H\LX.LX;!$q@rI*!tG9gQ-UJ_#Cl=H)uQ7-3%%AJVAT;mP/'^PoF6K%IoLY;['dLsU?)
%&LUEh%HGf;0T@M&hQt>*4'V%(n_8pcV%p3?9l$n9GP8?6GJF!BU(FcO["V:o<AK>"ZXW3=0!ruICeU.]=h&7=G#fmia'nF`3PD9j
%$Fsdp-fZ<_IJDTdkJK3eJ'fUt3b5@*f4SlG:E((iUp.9+lt#94s"%U'0uG`_Vie=m"Q70E`k):f`$A)d![YQSp"<6lP]_RL@e14A
%(#9[@N[-L=H<'g![jm.+OgH"*?.+_m6;j:PgoInk"'B:6&5aHI9T3$_7sZ-kAWfksjIkHTWFc*Qocu$LTLr5/.>?g:WIH3sCa09]
%4(5=(I&efQW",!=2,UO`ek>Dp<\5h8'B9m*8hkUe;csBKMOXflU0#F'N`hXO1)^scGg7^K3ed@uLI#0Qm')1S)!oNnP[O&i!J/L&
%WfJ8<JP1<O$*[*M>)7RtrDLF(WT*]P]H/&LAeaf$er#[u_ePZ(Kq)<Hi*G;:F7cuMVE[CL^UK%k5nSa[(RkJ>9r$\Wqo3s*JeH-,
%7JX$2[&uQq^6QegITX/bhn[c_r[@X<\`>\E$s^H;TQrc'<NEq_M?7@amr0[YCE9ouUkg^V"N>>kQ8WGL8O7g^kEXj@WVhTkYc!f5
%Z:Zk1gM1Wc>Vun,H_c2XN.F]0:-m3[*"ikl5WjW`b/*jod[(U&ViH2)7N>$5U.B(f]AEgI9Hn)j[MKNCieuCD3Ac=(Qp.Qe4=H;f
%[&DuMP1!Ql$EG,i.o#J-1a^GV0fNgJFgWf3[NNab:jDj%^-J!%&N,IcUSqZaQq'PhN<FAO\5f<aZBGOC>+)8m)l>'IXX]5V/%u<l
%?87SSKN!Gh-K-Okl^&SO!;)be#9Hq#RhqjdEIj@4/2u<s[Kp+XFfZ>/"9*;c&tE6jh3#*!pmaEb2I7X*I\V%*6<UECqlY=N6WC"5
%.KBT_YM4tM>"&T)igf30XTqlh39B,gC''6MZP(i>.-_RSdpaTG*,KZ,P-n\3)+j<uX;0]?lg&'$adf#fO<qG84+u8k;CLl"*#W01
%mLP2Y[pN&6*\q2Yi[Y$5*4)23bES]^2/nZ!aPKs='9B!;+&7m`<=+/`[tCkf)+R8KMGjgsk*-M(RB3Db:Q+9b$.'UP]"ji8>pV?D
%^o>C3R4ell>#8;IiiIGHL^RJ;LpLR$7+T!L1amqLh/[kIPoZPb=7h-l+g(B;]nZpA6Lh[n!hs^:TRWVJ(b))AX_fO/8#d2D(@&cm
%a[j(Mep=^aW]X14j*EYQ0.<P%2$9YsZCNri83DrUA9/UX.;OIfW*MY)4*LN1k*BWoF46&],g^]i-B(KcNc[0!@]s`&A@:<O8sGG2
%D#IrT65#U4NiUj9ZPYOU,hU:VRK5\`g+($j>n^'jj\WEgI_KTt,5e1cM_*.qGsLAVB*.Woopbc4'Ue.>Q%F"EE"/GATT$\^a%7G!
%T(SF33cW/8?[UptT*.45%]8"$AKu%.Z/E<npe%E2@oQ50ih-C7B3/UM1PC@'=6klt[%_[6CV_CQYFV>1V%2I-:5s*,UB8@[ftkt5
%+K5I5pJu*p0C5f9j%9nTaGNBO_6R]FT0ehiK8:(lMi3Z%R$48l;&J$`BrXa7,q4[\l#%VNDTXB]-+Sh:q@n@HFChDCC5I_UeHq=2
%N\'$^^TkuAL(V[3P4+\j&_55.obc99DnUB)P58]IN@B^.LL?%p>qP*.;(n.F0Um<7PPW7N-9ra_'9VO3&m0D[cDnd^[?\4ZfX\/V
%LD&)4W=qN\d2FYB_>VHfgqhd`9L&dP(Q9I<5[>%q2FQ&l0OfkbVpLF]l^eG:FTn^sBIfAs1tOD?(2Uq:p`pT?/[q:\Pg=Fb-L%R2
%*pGe_S7%LNI<:?>E-]kMLC&^uVclb1R:^`=+bUl$Iu[H+8M/XLJYNQKU9sc92)m7u)'k_:K*]T/)RGTqMM>;87J$_P0%@/E[Bj)B
%\-)oB'@e&XHJ*FtXBo^jIOun+rH_Sb7=r>3)3Gt)E\j!$#esrne3jIkC<@I2C.YIjE]708,RU'PM(EAGC6jk9GY("'`XsQN`)?b4
%7V4P2Bq9tk-^j%8Cd'ldT7At`9T@Qp@k1$!;1&N[JE_d+_%&58^Zst;RZD/rb=*S-BL0Wa.EHZfU8;%S1A@WTFcNStIHr=%?F7gt
%*EoRXf5GGrk'K.'L"]8ecVAZ_nrJ+JnF)<jq>Vr[#8o#X:r`h[D,c0'OQ1mY[pJIk9fA9!6Z]5KZ(*WjF(F*"VJK(Y)g)*^mfs_E
%_gneJbl`-X,U[GIg14EK[cXpfVHqG*YlqGN^t,9Om/67SI^T5/3'C#b22;!_4u3`K0M02A=lK]fLYcd*+r&U9PE7.%#>*$7b%#I$
%"_"a(JVkl?gmimjG5h!*9t#1XCHhVZS(jFBLU)4DX[bJ+l-!H4</Gs)4f'GA:O!)3mM$mGPCAtB0IhHQc9Q(qoe;@$/e\uX]"fDU
%Pu3Io.7i%/:?KYV\n`p$<]FQ30/D4p6`^%JqgA9e'0nOT7+Tqa^$PCQhp57b5F`iFU0/KaE"@G#i\%0r+GDKbLK!]koocnTC2b4b
%>)l^D.hr(01oe/ob/GsY17!b50i#//b&H`N^((_4&TJed!6]Dhl4T79_2!8jdr4]kJsfE?/R.*Ino=5:66k$Jgn+j9>W]k]MlnP3
%b"`eP*J:SC4`Ra*e-i[JNH7JXXL7Sf[<kl(?^^%pD)1TXBU!#-.NmD^I1J&#<r@'a\hYerSYu8%>jS\M3[`lc#hedsJWeM[<h*"n
%VFq\uE"7K;)HMD(hLL)(C6[)sdPc*0jJ*k6>e\?IX`:'^,h@$u$./+KR[Z9L^REJ=@caU1]Y-HpE8=U;1FUOF-E.)U8XY[t#$D%-
%NTeAb/_,r\ik'90&o^^b"@.*m=cKM6ZP&[mUBk!uV/.pc"DZai0^nL0ELLY)<cCs58a>4+q8c\:Y'H>GmZm[GZD9;a\89$F"lLT'
%G`Lb1&V-2hZB-<&16&=c\&n$Di@/bs.+un7L&#N4ppfB5)B4XW]s?S%`c.DK-Y7Fh4ccZp"C5T;5-1-WdKL+iXk0@ECl7c+^9f=^
%&sFM-a0D`g`b2`[A36CJX)HTnc=)#5Fr!9.HV955BMk+i'Q3+aX'9!NKtn4%VPJoh'uQF*DXgZ(ide*GYB\?a<$T048M=qp8;_/N
%reQ7]'Uo^/Q%0ofZ'nAk(MQj'@;?<ebSYr4,,GHr;4WklP9q0.U,^KC@q/;XBKj/MA6X8df%TZIHG'M@$*@:5ok#R5IJ'XBY^4]#
%XodL%IYIe`XGg$:2_h8r]#aqQH?E:ko:jbOVIp"LX.*oTThQnh(ETcN8G6"H2l?3\=^(^sCpI>rXSM4oGuaK*P4^cI.]Yd\g%ifu
%qcj_`92LUeK#&l.@HfF.$I$"p#iQmNF]2*A]@JrU]g^Ij%2MA]a!,6.;E[8NG4m[MA%.6U_AOqnVq[\aZ<`Nm\b=i'7.Wk.Ua-Br
%=bh1+e!IiGWU_f`MVj&-G5@HB\Nce270!]WR4oDT.sJD`poiu`o7E9/oNTfBlS3W`:A"i0RD%T#4Z4Ykb:iMII*j:q3j^c:I@kGe
%2q@HG:()8LO*7hXQbW6n,&.<pSHMT3abu\&'%7C>'J=ms;Vu#FoIR+(\=,q/)7Jg^\7\&<`29f30*G\Co1;ogGi5PY)SRK/ls@'@
%[LQI3eTXCTaGU\PI:\@Dh:[Y1hu28AMQ3dQbS`T+/Z>*P^md_aFU!nmA?<bKQ(tgs7(Q+A'BBOP8P4agjVWf.(*uAVP@8ZiEc1;,
%YeGR2djEiGA$'CakKE6]<3B8-HgB$RG5gnGT;b!%n>X2&q%A??%#W%=H9<t\iPs\7c628Yjb+S95:B&'K1dR>E$Go5L/QG-\T`[h
%P%RLJ1J9tg5!5j4(agphW1]El9:Q5r;e=7N4CqNC*#WN<Pf8"V>eOf+=10Ni<_RQj7q!$Q&bN"X_-p#i,)jiR<GhSnruSo7G<c&J
%R,+t>g\#oa<+TWL0S58gKq`-8_Lr@S)F4VG"_0o20YH,hGpr^aTaV-fF9Y*'a6$coU1&fm2<!YR8\KH>r.n9)*]If'1SrqGPmM,Z
%>ohqdN8C^MoPkOWPu7d'M;jcM3Q^HUR[JAJ>(h['s6?XL5Q&bZIl0'o?[h\2huE9;p[A)<%ZS5Ms6&;<iA\f@_EI\as%N<ns7PBu
%phueo--fifT>t==Db0lui8)<.4oFdKiuW[@e+&M!E7';X'(J3$rl_WLY+'jd?>)Bo_]N$VPj:%"B:.jk)IcBW>6DYSa35&mnB9I+
%X$nr>Ye-#$Vb;P>b$gPGR/hEJ[](deUFQ8V@LU,*PN(1l!(W%Q!4Y!GO@?ns-]^FHT1tsPB7/F.l)rb_Y.OZ-XDZp%BRi=^?1"5u
%X$=joF?X,WVtp<SegW(X=H0S06>PDc;a*+:$+^J&h8^o3j)=RL]:k[SHO!h95].a60YH.f9S^m#+9"h%=mKiWXBBJ;pt)ee1"ie%
%op0$%l<F"cf(RqrHG"Xte)0^F53-TL5?s8aSg*7AQS^nQ"!uNoH(^FaGLPM5)3""giltDo2Lc/)TL-EP1u1,YR)s\![-C:#48*cG
%_LC@6EH/jE09\Hk=sWks3_?K!=7XuD8p1UIkm*EnL?r!)*bE^r!iM\R(*KT(,H2Bc;):V&ePfYI09rj%%'RVK@P/aje;NMD-QG3&
%5Cqm`1%JXrQSit<&\G"c.5Y&&3!(QLqD_n)bCIY+_L,8R]%B3"&s-h/E0_gs!2c+bY)%(.6+jB>jf,#Erd'%]4Rp_1R'.I0V?^CV
%_<(@R8duR(03Je=X[:!s$:-r#p(7i_Z_TnSP0IE=Gc5-Jn?T!4%Ujp310jaPAua_\Fo.'fK8hSTfT#\A:AKgK?Du"V.eG'6hb'Kn
%e]ta3m]?3r'/PHsc#OnF'O\aV6JFe/,4<&==^KaQ5RlV2Ol.P:aHA"qa$^ks,J+ARPWr'b%5]Dk*:mqdr*!MR$r-!sQWbnNnY\dt
%\an4Hgho-rRSg@NqkF&nEe+T&iXiT"E8kr2=Y3X16R"q)>p?UB7As/bM^9hBC:!E'X9ah>6/GSUEftL51"<9^BCD+>2qM^)gU/WZ
%-hu4XIpTX'Y(uH0]DR"YV#PL1YCGgRs85Q?iSEd-/%QL,#Vou0k3CoW8PQXn-fnNU3gk&./'4qH8n6'YQpYC=lhs5&Eo3$"CB=dN
%nZDl4j:6+J<BAEr7RXNhOjZ'1TNZ)VIQ=<]dTp5S)TLt>+W!2ZGN>tgGPT.!QQMjOjkEE;mgo=cp_93$U#2kh7C&TL?4]#X-otFG
%H6](]NcF6KP6+HhR9P7of";"A,*'QI6p$YNQ9N\0b,ckm60G4#O$YKG`?nZZNJjOH4Bd%KlYl(W;YDW_:WGLP)Pi,!-<-g!D43t=
%U;`8TW_<T5*#D#pN*=9_rl^o<F?GVAA)'ckbjG16=4CA':Ot6oHnD;l:$[DcRI?*`pBeJ;eI`X=S(7jMh[TN+'"kmPag_RIcsT&c
%["cZ1"0l+!Ja";lgYm(Rc\&]B5SJYJ1s28OTh('U3(B/!q;jZ^HL50qoZ`4=0qcsKGr!^XgdNF:6?SgX_ppF]+p'uhiHH<[:Nfn=
%eT4P4s(oo1cdQXIi^;%Fn(ZG?99IE75s?@gk/<V9(Ok)lk!Pq&&)iL&&>?'HQR!*Eb!=Gf5IQr^*c0f"@lGH'9_(:)>.5P?k/Xb6
%WKkZ'FPE+E;qjBUDjBBma#oR0<0`I5BX5:D!F.6QMLng<0X9EX5ULdd`?3*9MgAg;OsjgkNSZ"1i-?bg!t1'@NR7TNrK'=C+e)tG
%S&]NS&\RG\LLo-Z^1$V`OlOY[^'9Kd4TIo]]rE6&\!_-cS*=oq(N!:,Z5rP4+;F2g"B":4LY[+GLT3/C]Ya0VYt)B!pNc%UC@hh'
%X/luNXA'#$+%nYj]PK3oHPc(dBi3.N5kN8E<U$$GWhFI36.+Z6cF4V32!s<$WOC6shrn$Gbo])gmuHOg'Ds;Ms#`bh9s6Q++]l7t
%SQ`A1.aK$[Q)8Z$<4uEQh4=OfWMc:e\i6M7h._B59&^LVeK99G3^56fn$$o:Pa@h:_40k&+6Md/K=UNk'#c>kj,>dQC4k@oh/Bjr
%*hTe2DU2O5[q@8*gU!4&m<X^4T=+</cWb_)k:OC%-TJM_+F:mTnQ0&.3(QUYo*9BgFk'Q(\#2n>/`ZKs&i1b=IBB\@/]gp7QNn+6
%nQeYPXc^drp?gW#?U&uJ.Hm`Tf6d9^Uu9SF:%&3IW]g:X+5XbZI/'1T^]28+hZ!MTpV6LBHHn1YqX*>?q64<%FQueZqk(WKs4*b!
%J,S^/_`X=lmsb!(rE$c4oC(8j>*CQ4eC4D:c1Ce0IsM(OJ+rB'`kVQP]<C+?ps].RCUY7Ae*m=c]<?\Tq#9UZo'XEm-_>Te;BX0D
%N0igRSM3PTkA,rqd#Tu5Gc=mp^/pDJKW'o!h*/oENh_/O!?[VYRYDhA(''Rp_2?0`\=`(RLdU%%MaFM=Yq2?)<Z(6%k`:<1[T/lQ
%U7K)$N;oa&\?>,069,5?g`d)N#E(K)"Fih<>+mY^f!ae%&.hHb==m'4GGV[Kn-_,`Q:.E@=&--H+_N-&k<]g^Fjlg38G\rhKh<5;
%0>r2fQ/RBAXtF&f28Df>UXVtWnnp5P;NXXQ^\ETBe'Sg%jM/<,1H<3B-u"L4Dn1at(Rg75eX@nm=6+IYj!"hO06D)G.2Mh\W1o/O
%RF9Ca.D/XNk)i9&/m3m'F%F?%>Q/'(Wg&gL.9[K:Q-,-\1;m>;-<$Hf+0F5P(?n8'PGNpp<j/?jTdUVH,WJ$%7]PohmIj-?QDZGl
%nC=ac>a%%&SX7Ct&qJ;)NP(X+VCk=:DZRh2aJatthm]ibl\NPX&e`ebMon1P1i<_(F[PI$EtG;Y<2[$3Z$Fn(s"P3EMJUGf33k<-
%)*#7Fo_h_*'FY)/bc?jg;rU,;Ib<n:HKAQ%^]dc8dU-)tBbu,^Y#iLEO:j?]iM"-fe2>^6!lSSi+j-!'mek`[:%;FrfqAHom[u8`
%Y8UJEeoN^j+-?\))sMJn-052,`fSP*kZjD\I:MJ=/is'9kHGn<*XSJi9Gu8(kAT1@W1i<d/mif\Fq>V/<aLIMe?;lSFX7EP@03_^
%M7uLiMFmb%'DJG7X%@Wb"jQm2%>S&Z#>e5PS=o]ap<`J)&6W5\es40X[]Z5pV=&@Q>p?mcSpE@*PdKu[i39V25%Cb@U:X@i[SBN<
%DVh"(*.o[%EX_Z@Tq<^sHW1A;2>iaI1i<^SaGgh5eRX5S%hBss9gNh]/)Flg3PrEHg74Xcr[\nKY`+hMKlcsF&a<KrLsrdJ5naN.
%PWs#d!)nuNhn'n2AgNQ;7VtSPkO,g$MlZ(3@J;^Y+TK>.d<dnr.-#VLgXW^&4j"\S5GJ!J>M^H6]rVR1LL[O>pi&D;]2JN2J+qJ!
%?&dobcthF>]g/\8XAeR=\!b\TLM1V;+X&20Pb&_0X%!@g7hK]'enIZqP`07'.8Vc$[$oRjAp1`2,CEK;eU<LY+bX$fh(QgdV#CnD
%qt!B'>jlaJpLd6mQ"0N#PFL*=G/m\ee7)aC&;@HmBPhfR)4`&QEAE9Q\[/tm5.O*RMe;.PX95cN;gVX#*oUnch(8+>^CtP\beQ0l
%HAm4_?bTM4q*G`9J:IC+._:JX0q+[JZGkOaKlrJcQc6%<]p'<KoN5%`hQ(L.g;98fr)p6j1@N6kRoA+hat8CGAXoD.8kT%'A4$_F
%*?l;,j#BWq,66AjU-`,TMF:W3oY@kbQ-m8Q04hpOL\G)tU8&;hW\i,9<$RqUT,o+?k"RF_'f9e>da\iH^Y\Hir"G`qjui<7m"u=R
%hDS!G8);HUm5i!-k+Yh3V[n9n)kJh'T^&Jm*Z(RdAk*D;'ttJ#/O9X2\f?#[/X`ht<Zuop4@LIfGc%uGqlG&cfoSqd>>@sL%RT\7
%&S$soEmlTIG8?Q008d+L1S?-0)BH+Gg"R.Ih'JEi8&(TW;%iT/5lG0:Ms.:J9B_M"R7nL^YF5Wc]6G>5P01U0bcn$WJD[9JJNrd;
%=^=m_(QBMs"1K3A=WXH4?n.r5l&l8993(1HRf!22"i+iWS?/FcLLKO)lpZhRlUNu`dCH"D7!`7I@Q5C)U=rl*-k&5&AYVY$=ji>"
%qR]p1Sa:7>5HV*gD%q`nY4gbR%-1r0FqiRM>J\*t!R<SNf=)`2Nl`4^hI,g"&hL"\EcQ!B"rKA(3Zped='H,RXid%u7_J0EUb59`
%\:e2?f[aP(D#2.r!;h!<]4P9b8`Rj2N(Ealm^Mua=`A@kg`J02!P^^OY0O)[UM]97pSZs"BmG34^0+fkG6VEFeX%A,5<]m9GW4ET
%j]%',a0c3l1sZW#+S)Uqht.o?IW%W"U$Vm;481;H^sH9H$rb>8PVsL1M0H"``*l#uMCOB^==P*L&doM(C90#7k;g:L="(RWRP6be
%i(`.F#d(6Jkj[bc1#QI0]l/ZU&C?rEjs2.`/p,ne"c\&ha&ig=#'@c\Tl:!47_.jPQ7$;FoAssfc9lnYTWbTH/#<UP`[p<KR.ogu
%EoM:/Ur!Y,[KsZ.S"Z;j-d@u]PugrhqElD:n*@mAp=-uLaCi$W")8+-6\f.TbFt\rEZe'M&tUqP`:L@^&oX.@:A#6$S='`$);?IQ
%?JT4pa.hKTl5k>#5$DQ81EXT<q8h?^b_L8*X]c!.=&L$DD'?i,P`5!-gs#B*bCZTl=^O4^6>o3'UI$6][[.5UJl&d-kdge(:.crg
%$9_00Y\ATs-/@ds`-8_<KOJ5eMbo@$9B=frG7Wsg-tJ:9Tp2_I.nVLRQ<6i32:!-:V:t6ghN.QC;,3^F`c\1g=;oe27m(\(544uB
%/Ts)M2cDh6)u"*"hk('a[G2cA=/X53cCqp4nn@#Ec/h:0\Pn6#G!;JhVCVW1?5:**IQ2+[=5)Kd/:ERSLeeC9:&%jO/4d,+55VRS
%>Jg^f_lIn#IbJ18n4\f>!_IqHG1t_uWsglrgL3d^0&`l[QBFSk9uVF&D$<d"jZcid@hUDo"8X\K5#mJLWQ-,I+lW*ld8+s*1VsGr
%K^9q%G$UG^^uG!TeXoHJUe9<t4HXpPD`9Y@_pb-FC`$g\?,VcDWmPoiYI:-[d#sY*\YSBhba:,0;4&q9-5Sa9!Y[NoZL1cO@`2oU
%Cmt'4W%3lkMG-S&k@UPe%515QAZCh,#bsiN9:3#Y6ZnNFAoV?D$WK^Y=;XN-W`iO&m.CLrVrGM;?iK\;[l8dIb\DWMGYgPd'tVO;
%"GF$3j4D4Zdac1(1:@B/89qSjQ7"4^l9^NO[-mj3Y)hn'e"CqV$e1OTerhcN'SRso+MqX%iqAkkC\6#G-^u;+eIM8sqQjM1Wf)!T
%7kNQ/5"6"kXJ"fP3e-nkj5nhnP_B"iP+WYOM7S0B,k:GiN-@@&3j;W2I()^<k9#11i6%S`0q4dXi9I]-n[FFd#%<<)]$`N*>a+Xr
%I:L3<-nDk\s*]W,F\Ykt'<oNB=2G$!GX5'*ZA.gL<3GJH*)",++QM@MWuS!<S7Pi$*n1$m_U,8[THu7`W>&H)<g$TOJbV9.SX-Vs
%^tU.FW6Vf-a&7bSE:ahVKqR4^0G7q:%FifYMeOG.q=`NQ75p34%T*AmMlG9?D%EdC%UMd(@0]T'NXI/SB+>Y;D7^rVAqSaTYi7FK
%ai1_.[dsbhI<[sQ^][=V/fO#Ug:b1V4%cCl;,f%RpeurJ>,F)88/]dea`R"tR?4W+s0O3]eGbRW>Ap.Y9h_BKAc8u+f(u66o5$(P
%U,d4oS(eI_O5-=NpYe%uOUJ(/f[(ibNabu2Y/hk3ar,q#MdfR:rM8F)=X*J)NS3iW?]rQl]5[d<PHC1tjsHtLTmG>XOWN%QmDehi
%,r.VS]=Is<IHC1@].Z+DF!J!eY(W_:d;HhJ>7R]?6\BY9cfBj>0m\*:i+^Y"nI1eXAW\n59U!DKOb<fXbIK3T-bD$h5MchQBe*n\
%SPmZ5X"2>-"A>_H9FBIQU3G5>*R+1ts,Km?0QQ(4&(b*9HsW.X0/U7)*!"ni,o7m;\S8]1=D_Op"Y1VOCC!'t]3C*Hq.8)t:1W9m
%V(-68\H9bcS>El?"f/10P[BXnLIMgk\ZcbkY(H7#2-j[h>!4NmDAkYu.YJq6ep/rT]@<prKA4g^Eg4F:?:i$,OV+7(+\JCr<:<'L
%l0J.J>7AKK8MNKq4I$Z&/)m;n)l^;aL'$-G]'YBlVNG2P/d[^qF<P=&"^.YLlF7mjI^:$"6AdeF=!u>f0O20ndA[/>jO&2Kqp"eJ
%n90fTYl,9iP$?FT!0cK/s19e2L<-1V8KEes91.tkcZj;DdENJ`p*"daTs!VUELcacooFb#h$<J6>o%q_,X`b=9S.?7g'7ET4X3rH
%MZt[[YmFK$!Q8XCY'dM#d.pbZi%In>'_sG\#ap+._hbcDip.f8XSS(0FS4Q&CXS:"GdOl/K,&Bo-0((Y'tUYdgl1RS/Z%41P_,40
%o.as'!M"C/I.TTSF%W0&i#tFd9*rnn3mtCW0dhEU_fZgZe,t4@]Zq'm=MP<eLUF1JAE+$P5k[L38i/mZQ2N,cVjY$g_dijomaR$B
%WT+dWY%9i#"23LA=Af*`aof_RYEsV#G.j6>`mE[!kou-$KdOA;N0M$F?1m0NVa".?iHnB;Xq*Z\^Z%3'l<L>E5Z?"?lpR>E5h]$d
%R]L23eIN85Z'IA*ZYk>h6:$o)V.;0k5rbjfm6;$-Ygi*RC3Xc0'O0a/QM%=_bi@sZp3\W&S`!;Br-+q.G%ijYC<36_En5%8MLDZ2
%>pr?Y[Hc#bkjB.h.n/j,dM].I:AMNK&YDn"rqPO-q/PeLQaQFaOpf%tg3\5(g:KL\mG4A?p282\Hai<<H@4T']00rsh4D%JDP,kB
%qLPRPY;3`Zq=oenjTT/rRQ(%-WEE>#8/NXua=R`0$/'G$cCXS?H"j6EbY`afp.1H+iNXc30G@?u&BJu.EdH)Iaf>+C&t;j)+!?-d
%F+E%TJD:jOm`U0)m-)Q8q>#KY-Y9ddl\C'#D&J58+H.1WQjcFN$YS(eZk>a2("OQ]L&oRjGVa7TM2(-18>NnKr`X!?.#7b"Z[)4C
%F2&d-n@2'UPa32A6e:D4eW;HInod0_O'<FS'Z[(XJ;aPX!juhT=$?LJ*KVqp\^(H@-,l":/8F'F]pBp'P!+4b[!KT_]V8C[E^S=^
%X(5\E"GY.^Pq8)o5[,TTa7jF0pV7aY%Ao:91NtV]CL+%3h@p#W`YX2/b],j1.X)ohT1P[J=+&^Xl)rb_Y.OZ-XDZp%ApchX/a].E
%V*E4)F?X$?U\o'J:U_OX9lV=s-2>+nnP[:/Mnn^5RCc\u7JZZ)OIam>ma)X"]nG9;8j!Q`+]Q4g6EZXJh>2H1IeM5to-llb4JX(%
%a8bOIAOgc;LFrS@@Nejb<5kZJ:#5/["7bNq:X`Yu/RM]':M\Dag7_?Z<-"F^Ib3+;!9CKcN).[-s(t9Dp6qdc?pHWR9&>[*#h]`!
%&^^Y5;X&uuo>PNk8E$%:6bANsBKK4Up:RFT28-eZaGl=6]IgUjkOe&M+3]7"oYSHddfQG_Z?k_U-_.?mjY^_k$=7s+QJ=`e/-%<b
%IW$o'!j2%%'sg<b[/d=nbY[-+_#[MM>@iBS]"7.0kN?`fJ3tt2QY3&sad`lOf(6dWb4-ZH/>OjEM;"HQk;?j%!\?n\6-0GK:sS)(
%]0gUCV(hV[,Xdg7MA1QkCo+bHDBEkIn-1d6FMl,Bje?aLkVS88<-41IiO3^=[;OT#bKe&g,V`Yn*4<[MZ0TK*'!0u7os;<:?Q%u)
%;];-%?Uf25<U.XJ"2Ba9YEK!d\bP6oa/Xip@p6G3$%A45U%UaV67[aaRQ8RA;^>)rb-@%8M2\>_!%(T?UT,>;I52$JC%s[*i7/0`
%=l,F&e3`iV4Rk4?Q/U!L\S6T6]0lM]YeODTDm"lakmRHT31<Um*j<14?Y2NMq]CRNQbU]CpM[hCc.dIBqYoe6^)2HorVa@c^Af9^
%^\duiqlbMGPMcB(h7pUPGk]`i!0lC@e+fhrhgYP':OiA]fC'g\oXd?c"UU0i_9[T(\,Z+crq%T<#$sECl2~>
%AI9_PrivateDataEnd
